{
  "openapi": "3.1.0",
  "info": {
    "title": "IdCanopy API Documentation",
    "description": "API documentation for IdCanopy",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://sandbox-umbrella-api.azurewebsites.net/api/services/",
      "description": "Sandbox Server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/address/verify": {
      "post": {
        "summary": "Verify Address",
        "description": "Verifies if an individual can be matched to a given address, including validation, a match quality score, and potential corrections.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddressVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully verified address.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          }
        }
      }
    },

    "/aml/checkIndividual": {
      "post": {
        "summary": "Check Individual",
        "description": "Checks an individual in the AML system to see if there are any matches for the provided details.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AMLIndividualCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "A JSON array of matching individuals.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AMLIndividualCheckResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "API key is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error403" 
                }
              }
            }
          },
          "500": {
            "description": "An internal server error occurred.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error500"
                }
              }
            }
          }
        }
      }
    },
    "/aml/ongoingMonitoring/registerIndividual": {
      "post": {
        "summary": "Register Individual for Monitoring",
        "description": "Registers an individual for ongoing monitoring in the AML system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AMLRegisterIndividualRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered individual for monitoring."
          },
          "400": {
            "description": "Invalid request provided."
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          }
        }
      }
    },
    "/aml/ongoingMonitoring/registerEntity": {
      "post": {
        "summary": "Register Entity for Monitoring",
        "description": "Registers an entity for ongoing monitoring in the AML system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AMLRegisterEntityRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully registered entity for monitoring."
          },
          "400": {
            "description": "Invalid request provided."
          }
        }
      }
    },
    "/aml/ongoingMonitoring/removeSearchProfile": {
      "post": {
        "summary": "Remove Search Profile",
        "description": "Removes a search profile from the AML ongoing monitoring system.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AMLRemoveProfileRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully removed search profile."
          },
          "400": {
            "description": "Invalid request provided."
          }
        }
      }
    },

    "/openJourney": {
      "post": {
        "summary": "Open Journey",
        "description": "Starts a new verification journey where the customer can submit documents in steps.",
        "requestBody": {
          "required": false,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "passThroughData": {
                    "type": "object",
                    "description": "Optional metadata to be carried through the journey."
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully opened verification journey.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "journeyId": {
                      "type": "string",
                      "description": "Unique identifier for the verification journey.",
                      "example": "uniqueJourneyIdentifier"
                    },
                    "passThroughData": {
                      "type": "object",
                      "description": "Optional metadata to be carried through the journey."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request due to missing or invalid parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "API key is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          }
        }
      }
    },
    "/addImage": {
      "post": {
        "summary": "Add Image",
        "description": "Adds an image (front, back, or selfie) to the ongoing journey. Images can be submitted as base64-encoded strings or as file uploads.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["journeyId", "imageName", "imageSide", "imageData"],
                "properties": {
                  "journeyId": {
                    "type": "string",
                    "description": "Unique identifier for the verification journey.",
                    "example": "uniqueJourneyIdentifier"
                  },
                  "imageName": {
                    "type": "string",
                    "description": "Name of the uploaded image file.",
                    "example": "uploadedFileName"
                  },
                  "imageSide": {
                    "type": "string",
                    "description": "Specifies which side of the document (front, back, selfie).",
                    "enum": ["front", "back", "selfie"],
                    "example": "front"
                  },
                  "storeOnly": {
                    "type": "boolean",
                    "description": "If true, stores the image without classification.",
                    "example": true
                  },
                  "imageData": {
                    "type": "string",
                    "description": "Base64-encoded image or multipart file.",
                    "example": "base64EncodedImagestring"
                  },
                  "passThroughData": {
                    "type": "object",
                    "description": "Custom metadata (e.g., user ID).",
                    "example": { "userId": "12345" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added image to journey."
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Journey not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          }
        }
      }
    },
    "/verify": {
      "post": {
        "summary": "Verify Documents",
        "description": "Initiates the verification of all images submitted in this journey. Returns a detailed verification result.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["journeyId"],
                "properties": {
                  "journeyId": {
                    "type": "string",
                    "description": "Unique identifier for the verification journey.",
                    "example": "uniqueJourneyIdentifier"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully verified documents.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "journeyId": {
                      "type": "string",
                      "description": "Unique identifier for the verification journey."
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the verification process.",
                      "example": "verificationComplete"
                    },
                    "identitySubject": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Type of identity subject.",
                          "example": "person"
                        },
                        "fullName": {
                          "type": "string",
                          "description": "Full name as extracted from the document.",
                          "example": "Max Mustermann"
                        },
                        "nameStructure": {
                          "type": "object",
                          "properties": {
                            "firstName": {
                              "type": "string",
                              "description": "First name of the individual.",
                              "example": "Max"
                            },
                            "lastName": {
                              "type": "string",
                              "description": "Last name of the individual.",
                              "example": "Mustermann"
                            },
                            "nativeFullName": {
                              "type": "string",
                              "description": "Native full name of the individual.",
                              "example": "Max Mustermann"
                            }
                          }
                        },
                        "gender": {
                          "type": "string",
                          "description": "Gender (M, F, or X).",
                          "enum": ["M", "F", "X"],
                          "example": "M"
                        },
                        "nationality": {
                          "type": "string",
                          "description": "Nationality code (ISO 3166).",
                          "example": "DE"
                        },
                        "dob": {
                          "type": "string",
                          "description": "Date of birth (YYYY/MM/DD).",
                          "example": "1990/01/01"
                        },
                        "addressSingleLine": {
                          "type": "string",
                          "description": "Extracted address in single-line format.",
                          "example": "123 Main St, City, Country"
                        },
                        "email": {
                          "type": "string",
                          "description": "Extracted email (if available).",
                          "example": "max.mustermann@example.com"
                        },
                        "mobileNumber": {
                          "type": "string",
                          "description": "Extracted mobile number (if available).",
                          "example": "+1234567890"
                        }
                      }
                    },
                    "authoritativeData": {
                      "type": "object",
                      "properties": {
                        "identityDocument": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Type of document.",
                              "example": "passport"
                            },
                            "idNumber": {
                              "type": "string",
                              "description": "Document ID number.",
                              "example": "123456789"
                            },
                            "issuingCountry": {
                              "type": "string",
                              "description": "Country that issued the document.",
                              "example": "DE"
                            },
                            "expeditor": {
                              "type": "string",
                              "description": "Issuing authority.",
                              "example": "BH Neunkirchen"
                            },
                            "expirationDate": {
                              "type": "string",
                              "description": "Expiry date of the document (YYYY/MM/DD).",
                              "example": "2030/01/01"
                            },
                            "verificationChannel": {
                              "type": "string",
                              "description": "How verification was performed.",
                              "example": "optical"
                            }
                          }
                        }
                      }
                    },
                    "proofOfWork": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Type of proof.",
                          "example": "image"
                        },
                        "titleOfProof": {
                          "type": "string",
                          "description": "Title describing the proof.",
                          "example": "IDFront"
                        },
                        "timestampOfProof": {
                          "type": "string",
                          "description": "Timestamp when the proof was collected.",
                          "example": "2024/08/01T10:00:00Z"
                        }
                      }
                    },
                    "auditTrail": {
                      "type": "object",
                      "properties": {
                        "workId": {
                          "type": "string",
                          "description": "Unique ID of the verification attempt.",
                          "example": "abc123"
                        },
                        "workStatus": {
                          "type": "string",
                          "description": "Status of the work.",
                          "enum": ["PASS", "FAIL"],
                          "example": "PASS"
                        },
                        "workStartTst": {
                          "type": "string",
                          "description": "Timestamp when the verification started.",
                          "example": "2024/08/01T10:00:00Z"
                        },
                        "workEndTst": {
                          "type": "string",
                          "description": "Timestamp when the verification ended.",
                          "example": "2024/08/01T10:01:00Z"
                        },
                        "workResult": {
                          "type": "string",
                          "description": "Summary of the verification result.",
                          "example": "Verification successful"
                        }
                      }
                    },
                    "fraudAlerts": {
                      "type": "object",
                      "properties": {
                        "fraudAlertDetail": {
                          "type": "array",
                          "description": "List of detected fraud alerts (if any).",
                          "items": {
                            "type": "object"
                          }
                        },
                        "aggregateFraudAlertScore": {
                          "type": "number",
                          "description": "Overall fraud risk score (0 = no risk).",
                          "example": 0
                        }
                      }
                    },
                    "croppedImages": {
                      "type": "object",
                      "properties": {
                        "front": {
                          "type": "string",
                          "description": "Base64-encoded image of the front side."
                        },
                        "portrait": {
                          "type": "string",
                          "description": "Base64-encoded portrait image from the document."
                        },
                        "signature": {
                          "type": "string",
                          "description": "Base64-encoded signature image."
                        },
                        "back": {
                          "type": "string",
                          "description": "Base64-encoded image of the back side."
                        },
                        "selfie": {
                          "type": "string",
                          "description": "Base64-encoded selfie image (if applicable)."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Journey not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          }
        }
      }
    },
    "/verify/age": {
      "post": {
        "summary": "Verify Age and Disability",
        "description": "Performs an optional age/disability verification after documents are submitted. Checks if the user meets certain age or disability thresholds.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["journeyId"],
                "properties": {
                  "journeyId": {
                    "type": "string",
                    "description": "Unique identifier for the verification journey.",
                    "example": "uniqueJourneyIdentifier"
                  },
                  "ageFrom": {
                    "type": "number",
                    "description": "Minimum age for eligibility (can't combine with ageTo).",
                    "example": 21
                  },
                  "ageTo": {
                    "type": "number",
                    "description": "Maximum age for eligibility (can't combine with ageFrom).",
                    "example": 65
                  },
                  "minDisabilityPercentage": {
                    "type": "number",
                    "description": "Minimum disability percentage required for eligibility.",
                    "example": 50
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully verified age and disability.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "journeyId": {
                      "type": "string",
                      "description": "Unique identifier for the verification journey."
                    },
                    "status": {
                      "type": "string",
                      "description": "Status of the verification process.",
                      "example": "ageAndDisabilityVerificationComplete"
                    },
                    "ageResult": {
                      "type": "string",
                      "description": "Indicates if the individual meets the age requirement.",
                      "enum": ["yes", "no"],
                      "example": "yes"
                    },
                    "disabilityResult": {
                      "type": "string",
                      "description": "Indicates if the individual meets the disability criteria.",
                      "enum": ["eligible", "not eligible"],
                      "example": "eligible"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          },
          "404": {
            "description": "Journey not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error404"
                }
              }
            }
          }
        }
      }
    },
    "/verifySingle": {
      "post": {
        "summary": "Single-Step Document Verification",
        "description": "Upload all document images in a single request and get instant verification results.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": ["imageName", "imageSide", "imageData"],
                  "properties": {
                    "imageName": {
                      "type": "string",
                      "description": "Name of the uploaded image file"
                    },
                    "imageSide": {
                      "type": "string",
                      "enum": ["front", "back", "selfie"],
                      "description": "Specifies which side of the document (front, back, selfie)"
                    },
                    "storeOnly": {
                      "type": "boolean",
                      "description": "If true, stores the image without classification"
                    },
                    "imageData": {
                      "type": "string",
                      "description": "Base64-encoded image or multipart file"
                    },
                    "passThroughData": {
                      "type": "object",
                      "description": "Custom metadata (e.g., user ID)"
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verification successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          }
        }
      }
    },

    "/identity/verify": {
      "post": {
        "summary": "Verify Identity",
        "description": "Verify identity information by matching it against external and internal databases.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IdentityVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved the verification results.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentityVerificationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request provided.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          }
        }
      }
    },
    
    "/kyb/search": {
      "post": {
        "summary": "Simple Search",
        "description": "Cached-first search for a company profile. Uses Umbrella’s canonical dataset. On cache miss, queries providers and persists identity-only rows. Returns decision-ready attributes: name, type, status, identifiers, addresses, industry codes.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/KYBSearchRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved search results.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/KYBSearchResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid request provided.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          }
        }
      }
    },
    "/kyb/company/details": {
      "post": {
        "summary": "Advanced Company Details",
        "description": "Enrich a selected company by companyId. Returns a full register-style record including officers, ownership, relationships, signatory rules, contacts, and company resources. Completeness and provenance behave as specified (field-level provenance only in extended mode).",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/KYBCompanyDetailsRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved company details.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/KYBCompanyDetailsResponse" }
              }
            }
          },
          "400": {
            "description": "Invalid request provided.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Authorization information is missing or invalid.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          }
        }
      }
    },

    "/payments/initiate": {
      "post": {
        "summary": "Initiate Payment",
        "description": "Initiates a payment by redirecting the user to a hosted payment page.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InitiatePaymentRequest"
              },
              "examples": {
                "default": {
                  "value": {
                    "amount": "100.50",
                    "currency": "EUR",
                    "referenceId": "uniqueRefId123",
                    "transactionDescription": "Payment for Order #12345",
                    "returnUrl": "https://example.com/callback",
                    "IBAN": "DE89370400440532013000",
                    "storedBIC": "BOFIIE2D",
                    "language": "DE"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Payment successfully initiated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitiatePaymentResponse"
                },
                "examples": {
                  "default": {
                    "value": {
                      "requestId": "req123456789",
                      "redirectUrl": "https://example.com/app/req_123456789"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error400"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error401"
                }
              }
            }
          }
        }
      }
    },
    "/payments/status": {
      "post": {
        "summary": "Retrieve Transaction Status",
        "description": "Retrieves the status of a transaction.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RetrieveStatusRequest" },
              "examples": {
                "default": {
                  "value": {
                    "referenceId": "uniqueRefId123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved transaction status.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/RetrieveStatusResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "status": "PENDING",
                      "statusReasonInformation": "User redirected to bank."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid Request: Missing required fields.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Unauthorized: Authentication failed.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          },
          "403": {
            "description": "Permission to access this endpoint is denied.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error403" }
              }
            }
          },
          "404": {
            "description": "Not Found: Reference ID not recognized.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error404" }
              }
            }
          },
          "429": {
            "description": "Too many requests.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error429" }
              }
            }
          },
          "500": {
            "description": "Internal Server Error: Unexpected server issue.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error500" }
              }
            }
          },
          "501": {
            "description": "The operation was not implemented.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error501" }
              }
            }
          },
          "503": {
            "description": "Service is unavailable.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error503" }
              }
            }
          },
          "504": {
            "description": "Gateway has timed out.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error504" }
              }
            }
          }
        }
      }
    },
    "/payments/challenge-deposit": {
      "post": {
        "summary": "Initiate Challenge Deposit",
        "description": "Initiates a challenge deposit to verify user identity by sending a small amount to the bank account.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChallengeDepositRequest" },
              "examples": {
                "default": {
                  "value": {
                    "amount": "0.10",
                    "currency": "EUR",
                    "description": "merchantId19887-65",
                    "firstName": "John",
                    "lastName": "Doe",
                    "piiToggle": 1,
                    "nameMatchLogic": "fuzzy"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated challenge deposit.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ChallengeDepositResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "transactionId": "e5c81c78-272b-4307-9197-3ace19109fd3",
                      "description": "merchantId19887-65",
                      "status": "OK",
                      "globalResult": {
                        "overall": "review",
                        "totalScore": 100
                      },
                      "nameMatchScore": 85,
                      "iban": "DE44500105175407324931",
                      "returnedFirstName": "John",
                      "returnedLastName": "Doe"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          }
        }
      }
    },

    "/phone-service/phoneStatus": {
      "post": {
        "summary": "Phone Status Check",
        "description": "Get insights about a phone number such as whether it is active or disconnected, whether its associated device is reachable or unreachable, and its associated device's roaming status.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PhoneStatusRequest" },
              "examples": {
                "default": {
                  "value": { "phoneNumber": "+486504142304" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved phone status.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneStatusResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "referenceId": "ABC123XYZ789",
                      "subResource": "live",
                      "status": {
                        "code": 300,
                        "description": "Transaction successfully completed",
                        "updatedOn": "2025-08-01T14:32:10Z"
                      },
                      "errors": [],
                      "phoneType": { "code": "2", "description": "MOBILE" },
                      "blocklisting": {
                        "blocked": false,
                        "blockCode": 0,
                        "blockDescription": "Not blocked"
                      },
                      "numbering": {
                        "cleansing": {
                          "call": {
                            "countryCode": "49",
                            "phoneNumber": "15123456789",
                            "cleansedCode": 100,
                            "minLength": 7,
                            "maxLength": 13
                          },
                          "sms": {
                            "countryCode": "49",
                            "phoneNumber": "15123456789",
                            "cleansedCode": 100,
                            "minLength": 7,
                            "maxLength": 13
                          }
                        },
                        "original": {
                          "completePhoneNumber": "+4915123456789",
                          "countryCode": "49",
                          "phoneNumber": "15123456789"
                        }
                      },
                      "location": {
                        "city": "Berlin",
                        "state": "Berlin",
                        "zip": "10115",
                        "metroCode": null,
                        "county": "Berlin County",
                        "country": { "name": "Germany", "iso2": "DE", "iso3": "DEU" },
                        "coordinates": { "latitude": "52.5200", "longitude": "13.4050" },
                        "timeZone": { "name": "Europe/Berlin", "utcOffsetMax": "+2", "utcOffsetMin": "+1" }
                      },
                      "carrier": { "name": "Generic Mobile GmbH" },
                      "live": {
                        "subscriberStatus": "ACTIVE",
                        "deviceStatus": "REACHABLE",
                        "roaming": "UNAVAILABLE",
                        "roamingCountry": null,
                        "roamingCountryIso2": null
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error400" } } }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error401" } } }
          },
          "403": {
            "description": "Forbidden.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error403" } } }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error500" } } }
          }
        }
      }
    },
    "/phone-service/phoneid": {
      "post": {
        "summary": "Phone ID",
        "description": "The Phone ID service provides identity checks and enriched data linked to a phone number. It includes optional modules like age verification, breached data, call forwarding detection, contact info, contact match, number deactivation, subscriber status, porting history, porting status, and SIM swap.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PhoneIDRequest" },
              "examples": {
                "default": {
                  "value": {
                    "phoneNumber": "11234567890",
                    "accountLifecycleEvent": "create",
                    "externalId": "CustomExternalID7349",
                    "originatingIp": "203.0.113.45",
                    "addons": {
                      "ageVerify": { "ageThreshold": 21 },
                      "contact": { "email": "test@example.com" },
                      "contactMatch": {
                        "firstName": "string",
                        "lastName": "string",
                        "address": "string",
                        "city": "string",
                        "postalCode": "string",
                        "state": "string",
                        "country": "string",
                        "inputUsed": "email"
                      },
                      "contactPlus": { "billingPostalCode": "95110" },
                      "numberDeactivation": {
                        "carrierName": "Verizon",
                        "lastDeactivated": "2016-04-05T00:00:00Z",
                        "trackingSince": "2014-10-06T00:00:00Z",
                        "status": { "code": 2800, "description": "Request successfully completed" },
                        "recycledSinceLastVerification": "notRecycled"
                      },
                      "portingHistory": { "pastXDays": 10 },
                      "breachedData": {},
                      "callForwardDetection": {},
                      "subscriberStatus": {},
                      "portingStatus": {},
                      "simSwap": {}
                    },
                    "consent": { "method": 1, "timestamp": "2018-05-05T00:00:00Z" }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved phone ID information.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneIDResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "status": true,
                      "data": {
                        "referenceId": "0123456789ABCDEF0123456789ABCDEF",
                        "externalId": null,
                        "status": {
                          "code": 300,
                          "description": "Transaction successfully completed",
                          "updatedOn": "2025-01-01T00:00:00Z"
                        },
                        "location": {
                          "city": "Countrywide",
                          "state": null,
                          "zip": null,
                          "metroCode": null,
                          "county": null,
                          "country": { "name": "Exampleland", "iso2": "EX", "iso3": "EXL" },
                          "coordinates": { "latitude": null, "longitude": null },
                          "timeZone": { "name": null, "utcOffsetMax": "+0", "utcOffsetMin": "+0" }
                        },
                        "blocklisting": { "blocked": false, "blockCode": 0, "blockDescription": "Not blocked" },
                        "numbering": {
                          "cleansing": {
                            "call": {
                              "countryCode": "99",
                              "phoneNumber": "5550123456",
                              "cleansedCode": 100,
                              "minLength": 7,
                              "maxLength": 13
                            },
                            "sms": {
                              "countryCode": "99",
                              "phoneNumber": "5550123456",
                              "cleansedCode": 100,
                              "minLength": 7,
                              "maxLength": 13
                            }
                          },
                          "original": {
                            "completePhoneNumber": "+995550123456",
                            "countryCode": "99",
                            "phoneNumber": "5550123456"
                          }
                        },
                        "phoneType": { "code": "2", "description": "MOBILE" },
                        "carrier": { "name": "Example Mobile Ltd" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request - Malformed syntax in the request.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error400" } } } },
          "401": { "description": "Unauthorized - Authentication failed.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error401" } } } },
          "404": { "description": "Not Found - The server could not find the requested resource.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error404" } } } },
          "429": { "description": "Too Many Requests - Rate limit exceeded.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error429" } } } },
          "500": { "description": "Invalid Transaction - Transaction not attempted due to a system issue.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error500" } } } },
          "503": { "description": "Service Unavailable - System is temporarily unavailable.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error503" } } } }
        }
      }
    },
    "/phone-service/phoneRiskScore": {
      "post": {
        "summary": "Phone Risk Score",
        "description": "Detects potentially fraudulent activity by analyzing the transaction risk associated with a phone number. Returns a risk score, level, and recommendation, along with detailed risk insights.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PhoneRiskScoreRequest" },
              "examples": {
                "default": {
                  "value": {
                    "phone": "+436501234567",
                    "accountLifecycleEvent": "create",
                    "externalId": "1234567890",
                    "originatingIp": "192.168.1.1",
                    "deviceId": "1234567890",
                    "accountId": "1234567890",
                    "emailAddress": "test@example.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved phone risk score.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PhoneRiskScoreResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "status": true,
                      "data": {
                        "referenceId": "3661FDC7EAA8111C93048FA6FB8C300C",
                        "externalId": null,
                        "status": {
                          "updatedOn": "2025-08-06T12:53:53.082687Z",
                          "code": 300,
                          "description": "Transaction successfully completed"
                        },
                        "numbering": {
                          "original": {
                            "completePhoneNumber": "+436501234567",
                            "countryCode": "43",
                            "phoneNumber": "6501234567"
                          },
                          "cleansing": {
                            "call": {
                              "countryCode": "43",
                              "phoneNumber": "6501234567",
                              "cleansedCode": 100,
                              "minLength": 7,
                              "maxLength": 13
                            },
                            "sms": {
                              "countryCode": "43",
                              "phoneNumber": "6501234567",
                              "cleansedCode": 100,
                              "minLength": 7,
                              "maxLength": 13
                            }
                          }
                        },
                        "riskInsights": {
                          "status": 800,
                          "category": [10010],
                          "a2P": [22001, 20011, 20101],
                          "p2P": [30201],
                          "numberType": [],
                          "ip": [],
                          "email": []
                        },
                        "phoneType": { "code": "2", "description": "MOBILE" },
                        "location": {
                          "city": "Countrywide",
                          "state": null,
                          "zip": null,
                          "metroCode": null,
                          "county": null,
                          "country": { "name": "Austria", "iso2": "AT", "iso3": "AUT" },
                          "coordinates": { "latitude": null, "longitude": null },
                          "timeZone": { "name": null, "utcOffsetMin": "+1", "utcOffsetMax": "+1" }
                        },
                        "carrier": { "name": "T-Mobile Austria GmbH" },
                        "blocklisting": { "blocked": false, "blockCode": 0, "blockDescription": "Not blocked" },
                        "risk": { "level": "medium-low", "recommendation": "allow", "score": 301 }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request - Malformed syntax in the request.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error400" } } } },
          "401": { "description": "Unauthorized - Authentication failed.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error401" } } } },
          "404": { "description": "Not Found - The server could not find the requested resource.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error404" } } } },
          "429": { "description": "Too Many Requests - Rate limit exceeded.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error429" } } } },
          "500": { "description": "Internal Server Error - An error occurred while processing the request.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error500" } } } },
          "503": { "description": "Service Unavailable - The service is temporarily unavailable.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error503" } } } }
        }
      }
    },
    "/phone-service/verification": {
      "post": {
        "summary": "Verification",
        "description": "Send a one-time verification code to a user via SMS or Email.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerificationRequest" },
              "examples": {
                "default": {
                  "value": {
                    "phoneNumber": "+436501234567",
                    "method": "sms",
                    "email": "test@test.com"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully initiated verification.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VerificationResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "referenceId": "0123456789ABCDEF0123456789ABCDEF",
                      "status": { "code": 3901, "description": "Request in progress" },
                      "recipient": { "phoneNumber": "11234567890" },
                      "method": "sms",
                      "state": "CREATED"
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request - Malformed syntax in the request.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error400" } } } },
          "401": { "description": "Unauthorized - Authentication failed.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error401" } } } },
          "404": { "description": "Not Found - The server could not find the requested resource.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error404" } } } },
          "429": { "description": "Too Many Requests - Rate limit exceeded.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error429" } } } },
          "500": { "description": "Invalid Transaction - Transaction not attempted due to a system issue.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error500" } } } },
          "503": { "description": "Service Unavailable - System is temporarily unavailable.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error503" } } } }
        }
      }
    },
    "/phone-service/verificationMatch/{referenceId}": {
      "patch": {
        "summary": "Verification Match",
        "description": "Validates the one-time passcode (OTP) provided by the end user and updates the state of an active verification process. Used to finalize verification by checking if the user-entered OTP matches the one originally sent.",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "Unique identifier for the verification process."
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/VerificationMatchRequest" },
              "examples": {
                "finalize": {
                  "value": {
                    "action": "finalize",
                    "securityFactor": "123456"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully validated verification code.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VerificationMatchResponse" },
                "examples": {
                  "verified": {
                    "value": {
                      "status": { "code": 3900, "description": "Verified" }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - Malformed syntax in the request.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error400" } } }
          },
          "401": {
            "description": "Unauthorized - Authentication failed.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error401" } } }
          },
          "404": {
            "description": "Not Found - The server could not find the requested resource.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error404" } } }
          },
          "429": {
            "description": "Too Many Requests - Rate limit exceeded.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error429" } } }
          },
          "500": {
            "description": "Invalid Transaction - Transaction not attempted due to a system issue.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error500" } } }
          },
          "503": {
            "description": "Service Unavailable - System is temporarily unavailable.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error503" } } }
          }
        }
      }
    },
    "/phone-service/fullPhoneIntelligence": {
      "post": {
        "summary": "Full Phone Intelligence",
        "description": "Comprehensive risk and identity assessment for a phone number combining behavioral signals, telecom intelligence, and historical data.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FullPhoneIntelligenceRequest" },
              "examples": {
                "default": {
                  "value": { "phoneNumber": "+436501234567" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully retrieved full phone intelligence.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/FullPhoneIntelligenceResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "status": true,
                      "data": {
                        "referenceId": "3661FDC54750091C93078058241C3036",
                        "externalId": null,
                        "status": {
                          "updatedOn": "2025-08-06T12:53:09.929413Z",
                          "code": 300,
                          "description": "Transaction successfully completed"
                        },
                        "numbering": {
                          "original": {
                            "completePhoneNumber": "+436501234567",
                            "countryCode": "43",
                            "phoneNumber": "6501234567"
                          },
                          "cleansing": {
                            "call": {
                              "countryCode": "43",
                              "phoneNumber": "6501234567",
                              "cleansedCode": 100,
                              "minLength": 7,
                              "maxLength": 13
                            },
                            "sms": {
                              "countryCode": "43",
                              "phoneNumber": "6501234567",
                              "cleansedCode": 100,
                              "minLength": 7,
                              "maxLength": 13
                            }
                          }
                        },
                        "riskInsights": {
                          "status": 800,
                          "category": [10010],
                          "a2P": [22007, 20011, 20101],
                          "p2P": [30201],
                          "numberType": [],
                          "ip": [],
                          "email": []
                        },
                        "phoneType": { "code": "2", "description": "MOBILE" },
                        "location": {
                          "city": "Countrywide",
                          "state": null,
                          "zip": null,
                          "metroCode": null,
                          "county": null,
                          "country": { "name": "Austria", "iso2": "AT", "iso3": "AUT" },
                          "coordinates": { "latitude": null, "longitude": null },
                          "timeZone": { "name": null, "utcOffsetMin": "+1", "utcOffsetMax": "+1" }
                        },
                        "carrier": { "name": "T-Mobile Austria GmbH" },
                        "blocklisting": { "blocked": false, "blockCode": 0, "blockDescription": "Not blocked" },
                        "risk": { "level": "medium-low", "recommendation": "allow", "score": 301 }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "description": "Bad Request - Malformed syntax in the request.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error400" } } } },
          "401": { "description": "Unauthorized - Authentication failed.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error401" } } } },
          "404": { "description": "Not Found - The server could not find the requested resource.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error404" } } } },
          "429": { "description": "Too Many Requests - Rate limit exceeded.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error429" } } } },
          "500": { "description": "Internal Server Error.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error500" } } } },
          "503": { "description": "Service Unavailable - System is temporarily unavailable.", "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Error503" } } } }
        }
      }
    },
    
    "/onboarding/createSessionLink": {
      "post": {
        "summary": "Create QES Session Link",
        "description": "Starts a QES signing session for a specified user. Returns a URL that redirects the user to the signing wizard. The backend will send this session link to the user for document signing.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateSessionLinkRequest" },
              "examples": {
                "default": {
                  "value": {
                    "email": "support@idcanopy.com",
                    "phoneNumber": "+436508021530",
                    "redirectUrl": "https://example.com/onboarding/success",
                    "docUrl": "https://cdn.idcanopy.com/pdf/onb-t3.pdf",
                    "signForms": [
                      { "fieldId": "Signature1", "actorId": "userToIdentify" },
                      { "fieldId": "Signature2", "actorId": "userToIdentify" }
                    ],
                    "fillForm": [
                      { "fieldId": "name", "value": "${identification.firstName}" },
                      { "fieldId": "surname", "value": "${identification.lastName}" }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Session link successfully created",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CreateSessionLinkResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "status": true,
                      "data": {
                        "requestId": "123e4567-e89b-12d3-a456-426614174000",
                        "url": "https://example.com/api/v2/actorTrip/urlback?t=EXAMPLE_TOKEN",
                        "expiresAfter": "2025-07-30T08:55:52.520909994Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          }
        }
      }
    },
    "/onboarding/configureWebhook": {
      "post": {
        "summary": "Configure Webhook",
        "description": "Registers a webhook URL to receive onboarding status updates such as completed verification, signing, or failures.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConfigureWebhookRequest" },
              "examples": {
                "default": {
                  "value": {
                    "webhookUrl": "https://api.idcanopy.com/webhooks/onboarding",
                    "metadata": {
                      "authHeader": {
                        "Authorization": "Bearer EXAMPLE_TOKEN_1234567890abcdef",
                        "Api-Key": "fQVZSAp18GqvbwId8LotQl"
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Webhook successfully configured",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConfigureWebhookResponse" },
                "examples": {
                  "default": {
                    "value": {
                      "status": true,
                      "data": {
                        "id": "74884fe3-c9e1-4462-b60f-c461e422000c",
                        "url": "https://api.idcanopy.com/webhooks/onboarding",
                        "createdAt": "2025-05-08T16:39:28.339Z"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          },
          "409": {
            "description": "Webhook configuration already exists.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error409" }
              }
            }
          }
        }
      }
    },
    "/onboarding/getVerification/{sessionId}": {
      "get": {
        "summary": "Get QES Verification Result",
        "description": "Retrieves identity and signature verification results for a given onboarding session ID.",
        "parameters": [
          {
            "name": "sessionId",
            "in": "path",
            "required": true,
            "schema": { "type": "string" },
            "description": "ID from the onboarding session."
          }
        ],
        "responses": {
          "200": {
            "description": "Verification result retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/VerificationResultResponse" },
                "examples": {
                  "completed": {
                    "value": {
                      "status": true,
                      "data": {
                        "isVerified": true,
                        "status": "completed",
                        "message": "Verification completed",
                        "requestId": "64d35e63-fdf4-43f6-8459-1216787fb34e",
                        "signature": {
                          "content": [
                            {
                              "id": "e919520e-bb24-41c3-8a7b-88b3c8b0008b",
                              "method": "RemoteSignatureLongLivedDisposableCertificate",
                              "status": "COMPLETED",
                              "pageMode": "headless",
                              "signedAt": "2025-06-11T11:53:04.107687Z",
                              "plainResource": {
                                "id": "5a28c0e7-a57e-4bb5-88f3-6b6bb47c2cf7",
                                "name": "Document To Sign",
                                "type": "CONTRACT_DOCUMENT",
                                "family": "DOCUMENT_TO_SIGN",
                                "status": "AVAILABLE",
                                "subType": "DOCUMENT_FLATTENED",
                                "filename": "Onboarding_TEST.pdf",
                                "metadata": {
                                  "sourceTemplateUrl": "https://files.example.com/Onboarding_TEST.pdf"
                                },
                                "mimeType": "application/pdf",
                                "sizeBytes": 138763,
                                "resourceUri": "nor://example/resource/5a28c0e7",
                                "resourceUrl": "https://example.com/storage/data/Onboarding_TEST.pdf",
                                "urlValidBefore": "2025-06-16T11:53:34.028Z"
                              },
                              "signedResource": {
                                "id": "60ab66ba-3b03-477c-8936-be55b15e890f",
                                "type": "CONTRACT_DOCUMENT",
                                "family": "SIGNED_DOCUMENT",
                                "status": "AVAILABLE",
                                "filename": "Onboarding_TEST.pdf",
                                "metadata": {
                                  "fileId": "8168e8d7-ab7b-4c6f-b19e-2fe1418da0d1",
                                  "workstep": "EXAMPLE_WORKSTEP_ID"
                                },
                                "mimeType": "application/pdf",
                                "sizeBytes": 207066,
                                "resourceUri": "nor://example/resource/60ab66ba",
                                "resourceUrl": "https://example.com/storage/data/Onboarding_TEST_signed.pdf",
                                "urlValidBefore": "2025-06-16T11:53:34.028Z"
                              }
                            }
                          ]
                        },
                        "identification": {
                          "id": "2b307448-4880-4d3d-b9ab-0a438298c77a",
                          "actor": "userToIdentify",
                          "idSelf": {
                            "artifacts": { "biometry": [], "document": [] },
                            "biometryCheck": { "keysWithError": [], "controlsSummary": 0 },
                            "documentCheck": {
                              "documentType": "PASSPORT",
                              "documentTypeFamily": "IDENTITY_DOCUMENT",
                              "keysWithError": [],
                              "controlsSummary": 0
                            }
                          },
                          "source": "ID-SELF",
                          "status": "COMPLETED",
                          "personData": {
                            "email": "max.mustermann@example.com",
                            "gender": "M",
                            "firstName": "Max",
                            "lastName": "Mustermann",
                            "birthDate": "1971-01-01",
                            "birthPlace": "Musterstadt",
                            "nationality": "DE",
                            "phoneNumber": "+491234567890",
                            "documentDetails": {
                              "type": "Passport",
                              "number": "X1234567",
                              "issuedOn": "2016-01-01",
                              "expiryDate": "2026-01-01",
                              "issuanceCountry": "DE",
                              "issuanceAuthority": "Example Authority"
                            }
                          },
                          "finalizedAt": "2025-06-11T11:52:29.961249669Z",
                          "organizationId": "example-org-id",
                          "validationDetail": {
                            "email": {
                              "otpValidated": "SKIPPED",
                              "byRequestInput": "OK",
                              "requestMatched": "SKIPPED",
                              "byIdentificationSource": "SKIPPED"
                            }
                          }
                        }
                      }
                    }
                  },
                  "failed": {
                    "value": {
                      "status": true,
                      "data": {
                        "isVerified": false,
                        "status": "cancelled",
                        "message": "Sorry, we were unable to identify you automatically. You can now try again."
                      }
                    }
                  },
                  "error": {
                    "value": {
                      "status": true,
                      "data": {
                        "isVerified": false,
                        "status": "error",
                        "message": "Verification error"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request payload.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error400" }
              }
            }
          },
          "401": {
            "description": "Unauthorized request.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error401" }
              }
            }
          },
          "404": {
            "description": "Session not found.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error404" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Error400": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid request payload"
          }
        }
      },
      "Error401": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Unauthorized request"
          }
        }
      },
      "Error403": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": { 
          "message": {
            "type": "string",
            "example": "Forbidden"
          }
        }
      },
      "Error500": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": { 
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          }
        }
      },
      "Error404": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Journey not found"
          }
        }
      },
      "Error422": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Missing required images"
          }
        }
      },
      "Error429": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Too Many Requests" },
          "message": { "type": "string", "example": "Rate limit exceeded." },
          "code": { "type": "string", "example": "429" }
        }
      },
      "Error501": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Not Implemented" },
          "message": { "type": "string", "example": "The operation was not implemented." },
          "code": { "type": "string", "example": "501" }
        }
      },
      "Error503": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Service Unavailable" },
          "message": { "type": "string", "example": "Service is unavailable." },
          "code": { "type": "string", "example": "503" }
        }
      },
      "Error504": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Gateway Timeout" },
          "message": { "type": "string", "example": "Gateway has timed out." },
          "code": { "type": "string", "example": "504" }
        }
      },
      "Error409": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Webhook configuration already exists" },
          "message": { "type": "string", "example": "Webhook configuration already exists for this product and customer." }
        }
      },

      "AddressVerificationRequest": {
        "type": "object",
        "required": ["country", "address", "identity"],
        "properties": {
          "country": {
            "type": "string",
            "description": "ISO 3166-1 Alpha-2/Alpha-3 country code (e.g., DE, AT, ES).",
            "minLength": 2,
            "maxLength": 3
          },
          "address": {
            "type": "object",
            "required": ["street", "number", "zip", "city"],
            "properties": {
              "street": { "type": "string", "description": "Street name." },
              "number": { "type": "string", "description": "House or building number." },
              "zip": { "type": "string", "description": "Zip or post code." },
              "city": { "type": "string", "description": "Town or city name." },
              "province": { "type": ["string", "null"], "description": "District, province, or state." }
            }
          },
          "identity": {
            "type": "object",
            "required": ["firstname", "lastname", "dob"],
            "properties": {
              "firstname": { "type": "string", "description": "First name of the person." },
              "lastname": { "type": "string", "description": "Last name of the person." },
              "dob": {
                "type": "string",
                "description": "Date of birth in the format YYYY/MM/DD.",
                "pattern": "^\\d{4}\\/\\d{2}\\/\\d{2}$",
                "example": "2001/10/25"
              }
            }
          }
        }
      },
      "AddressVerificationResponse": {
        "type": "object",
        "required": ["finalAddress", "addressStatus", "matchQuality", "score", "globalResult"],
        "properties": {
          "inputAddress": { "type": "string", "description": "Raw address provided." },
          "correctedAddress": { "type": "string", "description": "Corrected version of the address." },
          "finalAddress": { "type": "string", "description": "Final confirmed address." },
          "addressStatus": {
            "type": "string",
            "description": "Status after verification.",
            "enum": ["corrected", "unchanged"]
          },
          "addressComponents": {
            "type": "object",
            "description": "Detailed components of the final address.",
            "properties": {
              "street": { "type": ["string", "null"] },
              "number": { "type": ["string", "null"] },
              "zip": { "type": ["string", "null"] },
              "city": { "type": ["string", "null"] },
              "province": { "type": ["string", "null"] },
              "country": { "type": ["string", "null"] }
            },
            "additionalProperties": false
          },
          "matchQuality": {
            "type": "string",
            "description": "Match level.",
            "enum": [
              "EXACT",
              "HOUSEHOLD_MATCH",
              "PARTIAL_MATCH",
              "HOUSENUMBER_MATCH",
              "STREET_MATCH",
              "CITY_MATCH",
              "IDENTITY_MISMATCH",
              "NO_MATCH"
            ]
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 100,
            "description": "Confidence score (0-100)."
          },
          "globalResult": {
            "type": "object",
            "required": ["overall"],
            "properties": {
              "overall": {
                "type": "string",
                "enum": ["OK", "NOK", "REVIEW", "ERROR"],
                "description": "Overall operation status."
              },
              "totalScore": {
                "type": "integer",
                "format": "int32",
                "minimum": 0,
                "maximum": 100,
                "description": "Optional repetition of score for compatibility."
              }
            }
          },
          "identity": {
            "type": "object",
            "description": "Details of the identity as found in the search.",
            "properties": {
              "fullName": { "type": "string" },
              "dob": {
                "type": "string",
                "pattern": "^\\d{4}\\/\\d{2}\\/\\d{2}$"
              }
            },
            "additionalProperties": true
          },
          "extendedMessage": {
            "type": "string",
            "description": "Detailed feedback.",
            "enum": [
              "addressCorrected",
              "postCodeMatch",
              "localityMatch",
              "cityMatch",
              "districtMatch",
              "NoCity",
              "NoStreet",
              "NoPostCode",
              "previousAddress",
              "incorrectAddress",
              "addressFound",
              "identityNotFound",
              "deceased",
              "addressFakeSuspicion",
              "noMatch",
              "skippedDOB",
              "dobPartial",
              "dobFailedFull",
              "lastNameOnly",
              "firstNameOnly"
            ]
          }
        }
      },

      "AMLIndividualCheckRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Search string checked against name fields.",
            "example": "Boris Johnson"
          },
          "dob": {
            "type": "string",
            "description": "Date of birth in the format yyyy/mm/dd.",
            "example": "1964/06/19"
          }
        }
      },
      "AMLIndividualCheckResponse": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "description": "The timestamp of the response (ISO 8601 date time).",
            "example": "2024/09/24T19:16:00Z"
          },
          "totalHits": {
            "type": "number",
            "description": "The total number of hits for the searched parameters.",
            "example": 1
          },
          "foundRecords": {
            "type": "array",
            "description": "Array with attributes of type Individual.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "Unique identifier for the record.",
                  "example": "c438b18a93cd3c13"
                },
                "sourceType": {
                  "type": "string",
                  "description": "Possible values: SANCTION, PEP, CRIMINAL.",
                  "enum": ["SANCTION", "PEP", "CRIMINAL"],
                  "example": "PEP"
                },
                "pepType": {
                  "type": "string",
                  "description": "Type of PEP (e.g., POLITICIAN, JUDGE, BOARD_MEMBER_OF_CENTRAL_BANK).",
                  "example": "POLITICIAN"
                },
                "sourceId": {
                  "type": "string",
                  "description": "The source ID of the list.",
                  "example": "dilisense_pep"
                },
                "entityType": {
                  "type": "string",
                  "description": "Enumeration: INDIVIDUAL, UNKNOWN.",
                  "enum": ["INDIVIDUAL", "UNKNOWN"],
                  "example": "INDIVIDUAL"
                },
                "gender": {
                  "type": "string",
                  "description": "Enumeration: FEMALE, MALE, UNKNOWN.",
                  "enum": ["FEMALE", "MALE", "UNKNOWN"],
                  "example": "MALE"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the individual.",
                  "example": "Boris Johnson"
                },
                "lastNames": {
                  "type": "array",
                  "description": "A list of last names of this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["Johnson", "Pfeffel"]
                },
                "aliasNames": {
                  "type": "array",
                  "description": "A list of alias names of this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["Alexander Boris de Pfeffel Johnson", "Boris", "BoJo"]
                },
                "givenNames": {
                  "type": "array",
                  "description": "A list of given names of this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["Alexander", "Boris"]
                },
                "dateOfBirth": {
                  "type": "array",
                  "description": "A list of dates of birth for this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["1964/06/19"]
                },
                "placeOfBirth": {
                  "type": "array",
                  "description": "A list of places of birth for this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["New York City"]
                },
                "citizenship": {
                  "type": "array",
                  "description": "A list of citizenships for this individual in ISO 3166-1 alpha-2 format.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["GB", "US"]
                },
                "occupations": {
                  "type": "array",
                  "description": "A list of occupations for this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["journalist", "politician"]
                },
                "positions": {
                  "type": "array",
                  "description": "A list of positions for this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "2001/06/07 - 2005/04/11 Member of the 53rd Parliament of the United Kingdom",
                    "Since 2019/07/24 Prime Minister of the United Kingdom"
                  ]
                },
                "politicalParties": {
                  "type": "array",
                  "description": "A list of political parties for this individual.",
                  "items": {
                    "type": "string"
                  },
                  "example": ["Conservative Party"]
                },
                "links": {
                  "type": "array",
                  "description": "A list of links for this individual (e.g., websites, email addresses).",
                  "items": {
                    "type": "string"
                  },
                  "example": [
                    "https://www.gov.uk/government/people/boris-johnson",
                    "Facebook: borisjohnson"
                  ]
                }
              }
            }
          }
        }
      },
      "AMLRegisterIndividualRequest": {
        "type": "object",
        "required": ["profileId", "names"],
        "properties": {
          "profileId": {
            "type": "string",
            "description": "Unique identifier for the individual profile in the system.",
            "example": "8dac-b5393ce5ef3a"
          },
          "names": {
            "type": "string",
            "description": "Full name of the individual (e.g., \"Elon Musk\").",
            "example": "Elon Musk"
          },
          "gender": {
            "type": "string",
            "description": "Gender of the individual (optional, e.g., \"male\").",
            "example": "male"
          },
          "searchAll": {
            "type": "string",
            "description": "This field cannot be combined with the names parameter."
          },
          "dob": {
            "type": "string",
            "description": "Date of birth of the individual (optional).",
            "example": "1971/06/28"
          },
          "fuzzySearch": {
            "type": "string",
            "description": "Enables fuzzy search for the name (optional)."
          }
        }
      },
      "AmlRegisterIndividualResponse": {
        "type": "object",
        "required": ["error", "message", "profileId"],
        "properties": {
          "error": { "type": "boolean" },
          "message": { "type": "string" },
          "profileId": {
            "type": "string",
            "description": "The registered profile ID for reference."
          }
        }
      },
      "AMLRegisterEntityRequest": {
        "type": "object",
        "required": ["profileId", "names"],
        "properties": {
          "profileId": {
            "type": "string",
            "description": "Unique identifier for the entity profile in the system.",
            "example": "8dac-b5393ce5ef3a"
          },
          "names": {
            "type": "string",
            "description": "Full name of the entity (e.g., \"Tesla\").",
            "example": "Tesla"
          },
          "searchAll": {
            "type": "string",
            "description": "This field cannot be combined with the names parameter."
          },
          "fuzzySearch": {
            "type": "string",
            "description": "Enables fuzzy search for the name (optional)."
          }
        }
      },
      "AmlRegisterEntityResponse": {
        "type": "object",
        "required": ["error", "message", "profileId"],
        "properties": {
          "error": { "type": "boolean" },
          "message": { "type": "string" },
          "profileId": {
            "type": "string",
            "description": "The registered profile ID for reference."
          }
        }
      },
      "AMLRemoveProfileRequest": {
        "type": "object",
        "required": ["profileId"],
        "properties": {
          "profileId": {
            "type": "string",
            "description": "Unique identifier for the entity profile in the system.",
            "example": "8dac-b5393ce5ef3a"
          }
        }
      },
      
      "OpenJourneyRequest": {
      "type": "object",
      "description": "Optional metadata to be carried through the journey.",
      "properties": {
        "passThroughData": { "type": "object", "additionalProperties": true }
      }
      },
      "OpenJourneyResponse": {
        "type": "object",
        "required": ["journeyId"],
        "properties": {
          "journeyId": { "type": "string", "description": "Unique identifier for the verification journey." },
          "passThroughData": { "type": "object", "additionalProperties": true }
        }
      },
      "AddImagePayload": {
        "description": "Either a single image object or an array of image objects.",
        "oneOf": [
          { "$ref": "#/components/schemas/AddImageItem" },
          {
            "type": "array",
            "items": { "$ref": "#/components/schemas/AddImageItem" },
            "minItems": 1
          }
        ]
      },
      "AddImageItem": {
        "type": "object",
        "required": ["imageName", "imageSide", "imageData"],
        "properties": {
          "journeyId": { "type": "string", "description": "Unique identifier for the verification journey." },
          "imageName": { "type": "string", "description": "Name of the uploaded image file." },
          "imageSide": {
            "type": "string",
            "description": "Specifies which side of the document.",
            "enum": ["front", "back", "selfie"]
          },
          "storeOnly": { "type": "boolean", "description": "If true, stores the image without classification." },
          "imageData": { "type": "string", "description": "Base64-encoded image data." },
          "passThroughData": { "type": "object", "additionalProperties": true }
        },
        "additionalProperties": false
      },
      "AddImageMultipart": {
        "type": "object",
        "required": ["journeyId", "imageName", "imageSide", "file"],
        "properties": {
          "journeyId": { "type": "string" },
          "imageName": { "type": "string" },
          "imageSide": { "type": "string", "enum": ["front", "back", "selfie"] },
          "storeOnly": { "type": "boolean" },
          "file": { "type": "string", "format": "binary" },
          "passThroughData": { "type": "string", "description": "JSON string for metadata if needed." }
        }
      },
      "AddImageResponse": {
        "type": "object",
        "properties": {
          "error": { "type": "boolean", "default": false },
          "message": { "type": "string" },
          "journeyId": { "type": "string" },
          "images": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "imageName": { "type": "string" },
                "imageSide": { "type": "string", "enum": ["front", "back", "selfie"] },
                "imageId": { "type": "string" },
                "stored": { "type": "boolean" },
                "classified": { "type": ["boolean", "null"] }
              }
            }
          }
        }
      },
      "VerifyRequest": {
        "type": "object",
        "required": ["journeyId"],
        "properties": {
          "journeyId": { "type": "string", "description": "Unique identifier for the verification journey." }
        }
      },
      "VerifyResponse": {
        "type": "object",
        "required": ["journeyId", "status"],
        "properties": {
          "journeyId": { "type": "string" },
          "status": { "type": "string", "description": "e.g., 'verificationComplete'." },

          "identitySubject": {
            "type": "object",
            "properties": {
              "type": { "type": "string", "example": "person" },
              "fullName": { "type": "string" },
              "nameStructure": {
                "type": "object",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "nativeFullName": { "type": "string" }
                }
              },
              "gender": { "type": "string", "enum": ["M", "F", "X"] },
              "nationality": { "type": "string", "description": "ISO 3166 code (e.g., 'DE')." },
              "dob": { "type": "string", "description": "YYYY/MM/DD" },
              "addressSingleLine": { "type": "string" },
              "email": { "type": "string", "format": "email" },
              "mobileNumber": { "type": "string" }
            }
          },

          "authoritativeData": {
            "type": "object",
            "properties": {
              "identityDocument": {
                "type": "object",
                "properties": {
                  "type": { "type": "string", "example": "passport" },
                  "idNumber": { "type": "string" },
                  "issuingCountry": { "type": "string" },
                  "expeditor": { "type": "string" },
                  "expirationDate": { "type": "string", "description": "YYYY/MM/DD" },
                  "verificationChannel": { "type": "string", "example": "optical" }
                }
              }
            }
          },

          "proofOfWork": {
            "type": "object",
            "properties": {
              "type": { "type": "string", "example": "image" },
              "titleOfProof": { "type": "string" },
              "timestampOfProof": { "type": "string", "description": "YYYY/MM/DDTHH:MM:SSZ" }
            }
          },

          "auditTrail": {
            "type": "object",
            "properties": {
              "workId": { "type": "string" },
              "workStatus": { "type": "string", "enum": ["PASS", "FAIL"] },
              "workStartTst": { "type": "string" },
              "workEndTst": { "type": "string" },
              "workResult": { "type": "string" }
            }
          },

          "fraudAlerts": {
            "type": "object",
            "properties": {
              "fraudAlertDetail": { "type": "array", "items": { "type": "object", "additionalProperties": true } },
              "aggregateFraudAlertScore": { "type": "number" }
            }
          },

          "croppedImages": {
            "type": "object",
            "properties": {
              "front": { "type": "string", "description": "base64-encoded" },
              "portrait": { "type": "string", "description": "base64-encoded" },
              "signature": { "type": "string", "description": "base64-encoded" },
              "back": { "type": "string", "description": "base64-encoded" },
              "selfie": { "type": "string", "description": "base64-encoded" }
            }
          }
        }
      },
      "AgeVerifyRequest": {
        "type": "object",
        "required": ["journeyId"],
        "properties": {
          "journeyId": { "type": "string" },
          "ageFrom": { "type": "number", "description": "Minimum age for eligibility (mutually exclusive with ageTo)." },
          "ageTo": { "type": "number", "description": "Maximum age for eligibility (mutually exclusive with ageFrom)." },
          "minDisabilityPercentage": { "type": "number" }
        }
      },
      "AgeVerifyResponse": {
        "type": "object",
        "required": ["journeyId", "status", "ageResult", "disabilityResult"],
        "properties": {
          "journeyId": { "type": "string" },
          "status": { "type": "string", "example": "ageAndDisabilityVerificationComplete" },
          "ageResult": { "type": "string", "enum": ["yes", "no"] },
          "disabilityResult": { "type": "string", "enum": ["eligible", "not eligible"] }
        }
      },
      "VerifySingleRequest": {
        "type": "object",
        "required": ["images"],
        "properties": {
          "images": {
            "type": "array",
            "minItems": 1,
            "items": { "$ref": "#/components/schemas/VerifyImageItem" },
            "description": "List of image objects for verification."
          }
        }
      },
      "VerifyImageItem": {
        "type": "object",
        "required": ["imageName", "imageSide", "imageData"],
        "properties": {
          "imageName": { "type": "string", "description": "Name of the uploaded image." },
          "imageSide": {
            "type": "string",
            "description": "Specifies document side.",
            "enum": ["front", "back", "selfie"]
          },
          "imageData": { "type": "string", "description": "Base64-encoded image data." }
        },
        "additionalProperties": false
      },
      "VerifySingleMultipart": {
        "type": "object",
        "required": ["files"],
        "properties": {
          "files": {
            "type": "array",
            "description": "Upload multiple images as files; each part represents one image.",
            "items": { "type": "string", "format": "binary" }
          }
        }
      },

      "IdentityVerificationRequest": {
        "type": "object",
        "required": ["identity", "address"],
        "properties": {
          "identity": {
            "type": "object",
            "required": ["firstName", "lastName", "birthDate"],
            "properties": {
              "firstName": { "type": "string" },
              "lastName": { "type": "string" },
              "nationalId": { "type": "string" },
              "birthDate": {
                "type": "string",
                "description": "Birthdate of the individual in the format YYYY/MM/DD.",
                "pattern": "^\\d{4}\\/\\d{2}\\/\\d{2}$"
              }
            }
          },
          "address": {
            "type": "object",
            "required": ["street", "postalCode", "city", "countryCode"],
            "properties": {
              "street": { "type": "string" },
              "houseNumber": { "type": "string" },
              "building": { "type": "string" },
              "postalCode": { "type": "string" },
              "city": { "type": "string" },
              "district": { "type": "string" },
              "province": { "type": "string" },
              "countryCode": { "type": "string" }
            }
          },
          "phone": {
            "type": "object",
            "properties": {
              "phoneNumber": { "type": "string" }
            }
          }
        }
      },
      "IdentityVerificationResponse": {
        "type": "object",
        "required": ["globalResult", "resultDetails"],
        "properties": {
          "globalResult": {
            "type": "object",
            "properties": {
              "totalScore": {
                "type": "integer",
                "enum": [0, 50, 75, 100],
                "description": "Aggregate verification score."
              }
            }
          },
          "resultDetails": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "datasource": { "type": "string" },
                "country": { "type": "string" },
                "matches": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "record": { "type": "string" },
                      "match": {
                        "type": "string",
                        "enum": ["full", "partial", "not-present"]
                      }
                    }
                  }
                }
              }
            }
          }
        }
      },

      "KYBSearchRequest": {
        "type": "object",
        "required": ["name", "country", "locality"],
        "properties": {
          "name": {
            "type": "string",
            "description": "Registered name of the company.",
            "example": "IDCANOPY GROUP LTD"
          },
          "country": {
            "type": "string",
            "description": "Two-letter ISO country code of company registration.",
            "pattern": "^[A-Z]{2}$",
            "example": "GB"
          },
          "registrationNumber": {
            "type": "string",
            "description": "Official company registration number (may be empty).",
            "example": ""
          },
          "locality": {
            "type": "string",
            "description": "City or locality where the company is registered.",
            "example": "London"
          }
        }
      },
      "KYBSearchResponse": {
        "type": "object",
        "required": ["status", "requestId", "companyId", "timestamp", "data"],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request (e.g., success).",
            "example": "success"
          },
          "requestId": {
            "type": "string",
            "description": "Client-provided request identifier for traceability.",
            "example": "client-req-987"
          },
          "companyId": {
            "type": "string",
            "description": "Unique company identifier assigned by the platform.",
            "example": "umb-7c9a-..."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp when the response was generated.",
            "example": "2025-08-25T08:00:00Z"
          },
          "data": {
            "type": "object",
            "properties": {
              "company": {
                "type": "object",
                "properties": {
                  "legalName": {
                    "type": "string",
                    "description": "Official registered legal name of the company.",
                    "example": "ACME GmbH"
                  },
                  "tradingNames": {
                    "type": "array",
                    "items": { "type": "string" },
                    "description": "List of trading or alternative names.",
                    "example": ["ACME"]
                  },
                  "status": {
                    "type": "string",
                    "description": "Current company status.",
                    "example": "active"
                  },
                  "companyType": {
                    "type": "object",
                    "properties": {
                      "native": {
                        "type": "object",
                        "properties": {
                          "value": { "type": "string", "example": "Gesellschaft mit beschränkter Haftung" },
                          "language": { "type": "string", "example": "de" },
                          "source": { "type": "string", "example": "register" }
                        }
                      },
                      "modeled": {
                        "type": "object",
                        "properties": {
                          "value": { "type": "string", "example": "Limited Liability Company" },
                          "scheme": { "type": "string", "example": "idcanopy" },
                          "source": { "type": "string", "example": "modeled" }
                        }
                      }
                    }
                  },
                  "incorporationDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Official incorporation date (YYYY-MM-DD).",
                    "example": "2019-07-01"
                  },
                  "registrationDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date of registration (YYYY-MM-DD).",
                    "example": "2019-06-15"
                  },
                  "country": {
                    "type": "string",
                    "description": "Two-letter ISO country code of incorporation.",
                    "pattern": "^[A-Z]{2}$",
                    "example": "AT"
                  },
                  "registeredAddress": {
                    "type": "object",
                    "properties": {
                      "singleLine": {
                        "type": "string",
                        "description": "Full formatted address string.",
                        "example": "Musterstraße 1, 1010 Wien, AT"
                      },
                      "structured": {
                        "type": "object",
                        "properties": {
                          "line1": { "type": "string", "example": "Musterstraße 1" },
                          "city": { "type": "string", "example": "Wien" },
                          "postalCode": { "type": "string", "example": "1010" },
                          "country": { "type": "string", "pattern": "^[A-Z]{2}$", "example": "AT" }
                        }
                      }
                    }
                  },
                  "businessAddress": {
                    "type": "object",
                    "properties": {
                      "singleLine": {
                        "type": "string",
                        "description": "Full business/trading address string.",
                        "example": "Musterstraße 1, 1010 Wien, AT"
                      },
                      "structured": {
                        "type": "object",
                        "properties": {
                          "line1": { "type": "string", "example": "Musterstraße 1" },
                          "city": { "type": "string", "example": "Wien" },
                          "postalCode": { "type": "string", "example": "1010" },
                          "country": { "type": "string", "pattern": "^[A-Z]{2}$", "example": "AT" }
                        }
                      }
                    }
                  },
                  "identifiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "scheme": {
                          "type": "string",
                          "description": "Identifier scheme (e.g., REGISTRATION_NUMBER, VAT, LEI).",
                          "example": "REGISTRATION_NUMBER"
                        },
                        "value": { "type": "string", "example": "FN 123456x" },
                        "country": {
                          "type": "string",
                          "nullable": true,
                          "description": "Country associated with the identifier.",
                          "example": "AT"
                        }
                      }
                    }
                  },
                  "industryCodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "scheme": { "type": "string", "example": "NACE" },
                        "code": { "type": "string", "example": "62.01" },
                        "label": { "type": "string", "example": "Computer programming activities" }
                      }
                    }
                  },
                  "website": {
                    "type": "string",
                    "format": "uri",
                    "example": "https://acme.example"
                  }
                }
              }
            }
          },
          "metadata": {
            "type": "object",
            "properties": {
              "confidence": {
                "type": "number",
                "format": "double",
                "description": "Confidence score for the company match (0–1).",
                "example": 0.93
              },
              "completeness": {
                "type": "number",
                "format": "double",
                "description": "Completeness score for available company data (0–1).",
                "example": 0.92
              },
              "cacheAge": {
                "type": "string",
                "description": "Age of cached response.",
                "example": "3h"
              }
            }
          }
        }
      },
      "KYBCompanyDetailsRequest": {
        "type": "object",
        "required": ["companyId"],
        "properties": {
          "companyId": {
            "type": "string",
            "description": "Unique identifier assigned to the company.",
            "example": "123xyz"
          }
        }
      },
      "KYBCompanyDetailsResponse": {
        "type": "object",
        "required": ["status", "requestId", "companyId", "timestamp", "data"],
        "properties": {
          "status": {
            "type": "string",
            "description": "Status of the request (e.g., success).",
            "example": "success"
          },
          "requestId": {
            "type": "string",
            "description": "Client-provided request identifier.",
            "example": "client-req-987"
          },
          "companyId": {
            "type": "string",
            "description": "Unique company identifier assigned by the platform.",
            "example": "umb-7c9a-..."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "RFC 3339 timestamp when the response was generated.",
            "example": "2025-08-25T08:00:00Z"
          },
          "data": {
            "type": "object",
            "properties": {
              "company": {
                "type": "object",
                "properties": {
                  "legalName": { "type": "string", "example": "ACME GmbH" },
                  "tradingNames": { "type": "array", "items": { "type": "string" }, "example": ["ACME"] },
                  "status": { "type": "string", "example": "active" },

                  "companyType": {
                    "type": "object",
                    "properties": {
                      "native": {
                        "type": "object",
                        "properties": {
                          "value": { "type": "string", "example": "Gesellschaft mit beschränkter Haftung" },
                          "language": { "type": "string", "example": "de" },
                          "source": { "type": "string", "example": "register" }
                        }
                      },
                      "modeled": {
                        "type": "object",
                        "properties": {
                          "value": { "type": "string", "example": "Limited Liability Company" },
                          "scheme": { "type": "string", "example": "idcanopy" },
                          "source": { "type": "string", "example": "modeled" }
                        }
                      }
                    }
                  },

                  "incorporationDate": { "type": "string", "format": "date", "example": "2019-07-01" },
                  "registrationDate":  { "type": "string", "format": "date", "example": "2019-06-15" },
                  "country": { "type": "string", "pattern": "^[A-Z]{2}$", "example": "AT" },

                  "registeredAddress": {
                    "type": "object",
                    "properties": {
                      "singleLine": { "type": "string", "example": "Musterstraße 1, 1010 Wien, AT" },
                      "structured": {
                        "type": "object",
                        "properties": {
                          "line1": { "type": "string", "example": "Musterstraße 1" },
                          "city": { "type": "string", "example": "Wien" },
                          "postalCode": { "type": "string", "example": "1010" },
                          "country": { "type": "string", "pattern": "^[A-Z]{2}$", "example": "AT" }
                        }
                      }
                    }
                  },

                  "businessAddress": {
                    "type": "object",
                    "properties": {
                      "singleLine": { "type": "string", "example": "Musterstraße 1, 1010 Wien, AT" },
                      "structured": {
                        "type": "object",
                        "properties": {
                          "line1": { "type": "string", "example": "Musterstraße 1" },
                          "city": { "type": "string", "example": "Wien" },
                          "postalCode": { "type": "string", "example": "1010" },
                          "country": { "type": "string", "pattern": "^[A-Z]{2}$", "example": "AT" }
                        }
                      }
                    }
                  },

                  "identifiers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "scheme":  { "type": "string", "example": "REGISTRATION_NUMBER" },
                        "value":   { "type": "string", "example": "FN 123456x" },
                        "country": { "type": "string", "nullable": true, "example": "AT" }
                      }
                    }
                  },

                  "industryCodes": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "scheme": { "type": "string", "example": "NACE" },
                        "code":   { "type": "string", "example": "62.01" },
                        "label":  { "type": "string", "example": "Computer programming activities" }
                      }
                    }
                  },

                  "companyContacts": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "website":  { "type": "string", "format": "uri", "example": "https://acme.example" },
                        "phone":    { "type": "string", "example": "0049123455" },
                        "fax":      { "type": "string", "example": "0049123456789" },
                        "email":    { "type": "string", "format": "email", "example": "office@acme.com" },
                        "linkedin": { "type": "string", "format": "uri", "example": "https://linkedin.com/acme" },
                        "scheme":   { "type": "string", "example": "homepage" }
                      }
                    }
                  },

                  "GlobalsignatoryRules": {
                    "type": "object",
                    "properties": {
                      "native": {
                        "type": "object",
                        "properties": {
                          "value":    { "type": "string", "example": "Jeder Partner vertritt die Gesellschaft allein." },
                          "language": { "type": "string", "example": "de" },
                          "source":   { "type": "string", "example": "register" }
                        }
                      },
                      "modeled": {
                        "type": "object",
                        "properties": {
                          "value":  { "type": "string", "example": "Every partner has sole representation rights" },
                          "scheme": { "type": "string", "example": "idcanopy" },
                          "source": { "type": "string", "example": "modeled" }
                        }
                      }
                    }
                  },

                  "companyResources": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "financials":  { "type": "string", "example": "umbrelladetailuuid" },
                        "compliance":  { "type": "string", "example": "umbrelladetailuuid" },
                        "ubo":         { "type": "string", "example": "umbrelladetailuuid" },
                        "sanctionPeP": { "type": "string", "example": "umbrelladetailuuid" },
                        "description": { "type": "string", "example": "financials reference" }
                      }
                    }
                  },

                  "officers": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string", "example": "individual" },
                        "officerID": { "type": "string", "example": "uuid" },
                        "officerData": {
                          "type": "object",
                          "properties": {
                            "firstName": { "type": "string", "example": "John" },
                            "lastName":  { "type": "string", "example": "Doe" },
                            "DOB":       { "type": "string", "format": "date", "example": "2000-01-01" },
                            "birthplace": { "type": "string", "example": "Berlin" },
                            "countryOfBirth": { "type": "string", "example": "DE" },
                            "nationality":    { "type": "string", "example": "DE" },
                            "address": {
                              "type": "object",
                              "properties": {
                                "singleLine": { "type": "string", "example": "Musterstraße 1, 1010 Wien, AT" }
                              }
                            },
                            "identityData": {
                              "type": "object",
                              "properties": {
                                "PersonalNumber": {
                                  "type": "object",
                                  "properties": {
                                    "identifier": { "type": "string", "example": "asdfghj" },
                                    "country":    { "type": "string", "example": "PL" },
                                    "scheme":     { "type": "string", "example": "PESEL" }
                                  }
                                }
                              }
                            }
                          }
                        },
                        "activity": {
                          "type": "object",
                          "properties": {
                            "role": {
                              "type": "object",
                              "properties": {
                                "native": {
                                  "type": "object",
                                  "properties": {
                                    "value":    { "type": "string", "example": "Geschäftsführer" },
                                    "language": { "type": "string", "example": "de" },
                                    "source":   { "type": "string", "example": "register" }
                                  }
                                },
                                "modeled": {
                                  "type": "object",
                                  "properties": {
                                    "value":  { "type": "string", "example": "Managing Director" },
                                    "scheme": { "type": "string", "example": "idcanopy" },
                                    "source": { "type": "string", "example": "modeled" }
                                  }
                                }
                              }
                            },
                            "status": { "type": "string", "example": "active" },
                            "from":   { "type": "string", "format": "date", "example": "2000-01-01" },
                            "to":     { "type": "string", "format": "date", "example": "2000-01-01" },
                            "signatureRights": {
                              "type": "object",
                              "properties": {
                                "native": {
                                  "type": "object",
                                  "properties": {
                                    "value":    { "type": "string", "example": "Einzelvertretungsberechtigt" },
                                    "language": { "type": "string", "example": "de" },
                                    "source":   { "type": "string", "example": "register" }
                                  }
                                },
                                "modeled": {
                                  "type": "object",
                                  "properties": {
                                    "value":  { "type": "string", "example": "Individual Representation" },
                                    "scheme": { "type": "string", "example": "idcanopy" },
                                    "source": { "type": "string", "example": "modeled" }
                                  }
                                },
                                "signatureQuality": { "type": "string", "example": "individual" }
                              }
                            }
                          }
                        }
                      }
                    }
                  },

                  "ownership": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": { "type": "string", "example": "individual" },
                        "ownerID": { "type": "string", "example": "uuid" },
                        "ownerData": {
                          "type": "object",
                          "properties": {
                            "firstName": { "type": "string", "example": "John" },
                            "lastName":  { "type": "string", "example": "Doe" },
                            "address": {
                              "type": "object",
                              "properties": {
                                "singleLine": { "type": "string", "example": "Musterstraße 1, 1010 Wien, AT" }
                              }
                            },
                            "shareholding": {
                              "type": "object",
                              "properties": {
                                "holdingPct": {
                                  "type": "object",
                                  "properties": {
                                    "shares":       { "type": "string", "example": "49.9%" },
                                    "capital":      { "type": "string", "example": "EUR 12500" },
                                    "votingRights": { "type": "string", "example": "99%" }
                                  }
                                },
                                "verbalholding": {
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": { "type": "string", "example": "shares" },
                                      "native": {
                                        "type": "object",
                                        "properties": {
                                          "value":    { "type": "string", "example": "holds more than 25% but less than 50% of shares" },
                                          "language": { "type": "string", "example": "en" },
                                          "source":   { "type": "string", "example": "register" }
                                        }
                                      },
                                      "modeled": {
                                        "type": "object",
                                        "properties": {
                                          "value":  { "type": "string", "example": "SHARE 25-50" },
                                          "scheme": { "type": "string", "example": "idcanopy" },
                                          "source": { "type": "string", "example": "modeled" }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "isUBO": { "type": "string", "example": "yes" }
                          }
                        }
                      }
                    }
                  },

                  "relationships": {
                    "type": "object",
                    "properties": {
                      "ultimateBeneficialOwners": { "type": "array", "items": { "type": "string" }, "example": ["loremIpsum"] },
                      "transparencyRegister":     { "type": "array", "items": { "type": "string" }, "example": [] },
                      "familyTree":               { "type": "array", "items": { "type": "string" }, "example": ["loremIpsum"] },
                      "isHeadquarter":            { "type": "string", "example": "Yes" },
                      "isGlobalUltimate":         { "type": "string", "example": "Yes" },
                      "isDomesticUltimate":       { "type": "string", "example": "Yes" },
                      "isSubsidiary":             { "type": "string", "example": "Yes" }
                    }
                  }
                }
              }
            }
          },

          "metadata": {
            "type": "object",
            "properties": {
              "confidence":   { "type": "number", "format": "double", "example": 0.93 },
              "completeness": { "type": "number", "format": "double", "example": 0.92 },
              "source":       { "type": "string", "example": "Deutsches Handelsregister" },
              "sourceTst":    { "type": "string", "format": "date-time", "example": "2025-08-25T08:00:00Z" },
              "cacheAge":     { "type": "string", "example": "3h" }
            }
          }
        }
      },

      "InitiatePaymentRequest": {
        "type": "object",
        "required": [
          "referenceId",
          "transactionDescription",
          "returnUrl",
          "IBAN",
          "currency",
          "amount"
        ],
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Unique identifier for the transaction generated by your system.",
            "example": "uniqueRefId123"
          },
          "transactionDescription": {
            "type": "string",
            "description": "Description of the transaction.",
            "example": "Payment for Order #12345"
          },
          "returnUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect after payment completion – back to the calling app or website.",
            "example": "https://example.com/callback"
          },
          "IBAN": {
            "type": "string",
            "description": "Recipient's IBAN for direct payment.",
            "example": "DE89370400440532013000"
          },
          "storedBIC": {
            "type": "string",
            "description": "Pre-stored BIC code.",
            "example": "BOFIIE2D"
          },
          "language": {
            "type": "string",
            "description": "Language code.",
            "example": "DE"
          },
          "currency": {
            "type": "string",
            "description": "Currency code.",
            "example": "EUR"
          },
          "amount": {
            "type": "string",
            "description": "Payment amount formatted as a decimal string.",
            "example": "12.50"
          },
          "country": {
            "type": "string",
            "description": "Country code.",
            "example": "DE"
          }
        }
      },
      "InitiatePaymentResponse": {
        "type": "object",
        "required": ["requestId", "redirectUrl"],
        "properties": {
          "requestId": {
            "type": "string",
            "description": "Unique identifier for the request. Will be used to query the transfer status in the Retrieve Transaction Status API call.",
            "example": "req123456789"
          },
          "redirectUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL to redirect the user to the hosted payment page.",
            "example": "https://example.com/app/req_123456789"
          }
        }
      },
      "RetrieveStatusRequest": {
        "type": "object",
        "required": ["referenceId"],
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Unique identifier for the transaction generated from the Initiate Payment API call.",
            "example": "uniqueRefId123"
          }
        }
      },
      "RetrieveStatusResponse": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "type": "string",
            "description": "Transaction status.",
            "enum": [
              "PROCESSING",
              "SUCCESS",
              "INITIATED",
              "PENDING",
              "PENDING_EXTERNAL_AUTHORIZATION",
              "FAILURE_GENERIC",
              "FAILURE_PERMISSION_DENIED",
              "FAILURE_CANCELED",
              "FAILURE_EXPIRED",
              "FAILURE_INSUFFICIENT_FUNDS",
              "FAILURE_DECLINED",
              "SETTLEMENT_IN_PROGRESS",
              "SETTLEMENT_COMPLETED",
              "SETTLEMENT_INCOMPLETE",
              "COMPLETED",
              "FAILED"
            ],
            "example": "PENDING",
            "x-enumDescriptions": {
              "PROCESSING": "The transaction is in process; the final status has not yet been received from the bank.",
              "SUCCESS": "Successful payment initiation has been received from the bank. Settlement might not be complete.",
              "INITIATED": "The transaction was initiated but the result is unknown. This status will not be updated further.",
              "PENDING": "Authorization at the bank is complete; transfer is pending redemption (2-step flows).",
              "PENDING_EXTERNAL_AUTHORIZATION": "User is at the bank to complete authorization; may transition to FAILURE_EXPIRED.",
              "FAILURE_GENERIC": "Technical failure with no additional details from the bank.",
              "FAILURE_PERMISSION_DENIED": "User denied authorization at the bank (2-step flows).",
              "FAILURE_CANCELED": "Payment initiation was canceled before execution.",
              "FAILURE_EXPIRED": "Authorization not completed in time; payment expired.",
              "FAILURE_INSUFFICIENT_FUNDS": "Rejected due to insufficient funds.",
              "FAILURE_DECLINED": "Rejected by the bank.",
              "SETTLEMENT_IN_PROGRESS": "Waiting for funds to reach the payee bank.",
              "SETTLEMENT_COMPLETED": "Funds reached the payee bank; reconciliation complete.",
              "SETTLEMENT_INCOMPLETE": "Reconciliation failed; corresponding transaction not found.",
              "COMPLETED": "High-level: transaction completed successfully.",
              "FAILED": "High-level: transaction failed."
            }
          },
          "statusReasonInformation": {
            "type": "string",
            "description": "Additional details about the status.",
            "example": "User redirected to bank."
          }
        }
      },
      "ChallengeDepositRequest": {
        "type": "object",
        "required": [
          "amount",
          "currency",
          "description",
          "firstName",
          "lastName",
          "piiToggle",
          "nameMatchLogic"
        ],
        "properties": {
          "amount": {
            "type": "string",
            "description": "Small amount sent for verification.",
            "example": "0.10",
            "pattern": "^[0-9]+(\\.[0-9]{1,2})?$"
          },
          "currency": {
            "type": "string",
            "description": "Currency code.",
            "example": "EUR",
            "minLength": 3,
            "maxLength": 3
          },
          "description": {
            "type": "string",
            "description": "Mandatory, non-blank. Alphanumeric only; hyphens (-) allowed as separators. No spaces or other special characters.",
            "example": "merchantId19887-65",
            "pattern": "^[A-Za-z0-9-]+$"
          },
          "firstName": {
            "type": "string",
            "description": "First name for identity verification.",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "Last name for identity verification.",
            "example": "Doe"
          },
          "piiToggle": {
            "type": "integer",
            "description": "Determines if PII details should be returned.",
            "enum": [0, 1],
            "example": 1
          },
          "nameMatchLogic": {
            "type": "string",
            "description": "Name matching logic type.",
            "enum": ["exact", "fuzzy"],
            "example": "fuzzy"
          }
        }
      },
      "ChallengeDepositResponse": {
        "type": "object",
        "required": ["description", "status", "globalResult", "nameMatchScore"],
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "Unique identifier for the challenge deposit transaction.",
            "example": "e5c81c78-272b-4307-9197-3ace19109fd3"
          },
          "description": {
            "type": "string",
            "description": "The description sent in the request.",
            "example": "merchantId19887-65"
          },
          "status": {
            "type": "string",
            "description": "Status of the challenge deposit.",
            "enum": ["OK", "FAIL"],
            "example": "OK"
          },
          "globalResult": {
            "type": "object",
            "description": "Contains verification score and assessment result.",
            "required": ["overall", "totalScore"],
            "properties": {
              "overall": {
                "type": "string",
                "description": "Overall assessment.",
                "enum": ["review", "pass", "fail"],
                "example": "review"
              },
              "totalScore": {
                "type": "integer",
                "description": "Score (0-100) indicating verification quality.",
                "minimum": 0,
                "maximum": 100,
                "example": 100
              }
            }
          },
          "nameMatchScore": {
            "type": "integer",
            "description": "Score (0-100) indicating how well names matched.",
            "minimum": 0,
            "maximum": 100,
            "example": 85
          },
          "iban": {
            "type": "string",
            "description": "Verified IBAN.",
            "example": "DE44500105175407324931"
          },
          "returnedFirstName": {
            "type": "string",
            "description": "First name returned from verification if available and `piiToggle = 1`.",
            "example": "John"
          },
          "returnedLastName": {
            "type": "string",
            "description": "Last name returned from verification if available and `piiToggle = 1`.",
            "example": "Doe"
          }
        }
      },

      "PhoneStatusRequest": {
        "type": "object",
        "required": ["phoneNumber"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "The phone number to check, including country code (E.164).",
            "example": "+486504142304"
          }
        }
      },
      "PhoneStatusResponse": {
        "type": "object",
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Unique reference ID for the transaction.",
            "example": "ABC123XYZ789"
          },
          "subResource": {
            "type": "string",
            "description": "Sub-resource type (e.g., 'live').",
            "example": "live"
          },
          "status": {
            "type": "object",
            "properties": {
              "code": {
                "type": "number",
                "description": "Status code (e.g., 300 for success).",
                "example": 300
              },
              "description": {
                "type": "string",
                "description": "Status description.",
                "example": "Transaction successfully completed"
              },
              "updatedOn": {
                "type": "string",
                "description": "Timestamp of the last update (ISO 8601 format).",
                "example": "2025-08-01T14:32:10Z"
              }
            }
          },
          "errors": {
            "type": "array",
            "description": "List of errors, if any.",
            "items": { "type": "string" }
          },
          "phoneType": {
            "type": "object",
            "properties": {
              "code": {
                "type": "string",
                "description": "Phone type code (e.g., '2' for mobile).",
                "example": "2"
              },
              "description": {
                "type": "string",
                "description": "Phone type description.",
                "example": "MOBILE"
              }
            }
          },
          "blocklisting": {
            "type": "object",
            "properties": {
              "blocked": { "type": "boolean", "description": "Whether the number is blocked.", "example": false },
              "blockCode": { "type": "number", "description": "Block code (0 = not blocked).", "example": 0 },
              "blockDescription": { "type": "string", "description": "Block description.", "example": "Not blocked" }
            }
          },
          "numbering": {
            "type": "object",
            "properties": {
              "cleansing": {
                "type": "object",
                "properties": {
                  "call": {
                    "type": "object",
                    "properties": {
                      "countryCode": { "type": "string", "example": "49" },
                      "phoneNumber": { "type": "string", "example": "15123456789" },
                      "cleansedCode": { "type": "number", "example": 100 },
                      "minLength": { "type": "number", "example": 7 },
                      "maxLength": { "type": "number", "example": 13 }
                    }
                  },
                  "sms": {
                    "type": "object",
                    "properties": {
                      "countryCode": { "type": "string", "example": "49" },
                      "phoneNumber": { "type": "string", "example": "15123456789" },
                      "cleansedCode": { "type": "number", "example": 100 },
                      "minLength": { "type": "number", "example": 7 },
                      "maxLength": { "type": "number", "example": 13 }
                    }
                  }
                }
              },
              "original": {
                "type": "object",
                "properties": {
                  "completePhoneNumber": { "type": "string", "example": "+4915123456789" },
                  "countryCode": { "type": "string", "example": "49" },
                  "phoneNumber": { "type": "string", "example": "15123456789" }
                }
              }
            }
          },
          "location": {
            "type": "object",
            "properties": {
              "city": { "type": "string", "example": "Berlin" },
              "state": { "type": "string", "nullable": true, "example": "Berlin" },
              "zip": { "type": "string", "nullable": true, "example": "10115" },
              "metroCode": { "type": "string", "nullable": true },
              "county": { "type": "string", "nullable": true, "example": "Berlin County" },
              "country": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "example": "Germany" },
                  "iso2": { "type": "string", "example": "DE" },
                  "iso3": { "type": "string", "example": "DEU" }
                }
              },
              "coordinates": {
                "type": "object",
                "properties": {
                  "latitude": { "type": "string", "nullable": true, "example": "52.5200" },
                  "longitude": { "type": "string", "nullable": true, "example": "13.4050" }
                }
              },
              "timeZone": {
                "type": "object",
                "properties": {
                  "name": { "type": "string", "nullable": true, "example": "Europe/Berlin" },
                  "utcOffsetMax": { "type": "string", "example": "+2" },
                  "utcOffsetMin": { "type": "string", "example": "+1" }
                }
              }
            }
          },
          "carrier": {
            "type": "object",
            "properties": {
              "name": { "type": "string", "description": "Name of the carrier.", "example": "Generic Mobile GmbH" }
            }
          },
          "live": {
            "type": "object",
            "properties": {
              "subscriberStatus": { "type": "string", "example": "ACTIVE" },
              "deviceStatus": { "type": "string", "example": "REACHABLE" },
              "roaming": { "type": "string", "example": "UNAVAILABLE" },
              "roamingCountry": { "type": "string", "nullable": true },
              "roamingCountryIso2": { "type": "string", "nullable": true }
            }
          }
        }
      },
      "PhoneIDRequest": {
        "type": "object",
        "required": ["phoneNumber"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Phone number to query, including country code (no spaces or symbols).",
            "example": "11234567890"
          },
          "accountLifecycleEvent": {
            "type": "string",
            "description": "Stage of the user journey.",
            "enum": ["create", "sign-in", "transact", "update", "delete"],
            "example": "create"
          },
          "externalId": {
            "type": "string",
            "description": "Customer-defined ID echoed in the response.",
            "example": "CustomExternalID7349"
          },
          "originatingIp": {
            "type": "string",
            "description": "End user's IP address (IPv4 or IPv6).",
            "example": "203.0.113.45"
          },
          "addons": {
            "type": "object",
            "description": "Add-on services to enrich the phone lookup.",
            "properties": {
              "ageVerify": {
                "type": "object",
                "properties": {
                  "ageThreshold": { "type": "integer", "description": "Age threshold to verify against.", "example": 21 }
                }
              },
              "breachedData": { "type": "object", "description": "Checks whether the phone number has appeared in known data breaches." },
              "callForwardDetection": { "type": "object", "description": "Detects whether call forwarding is active and under what conditions." },
              "contact": {
                "type": "object",
                "description": "Returns known contact details such as name, address, and email.",
                "properties": { "email": { "type": "string", "example": "test@example.com" } }
              },
              "contactMatch": {
                "type": "object",
                "description": "Compares submitted contact data against the carrier’s data and returns a match score.",
                "properties": {
                  "firstName": { "type": "string" },
                  "lastName": { "type": "string" },
                  "address": { "type": "string" },
                  "city": { "type": "string" },
                  "postalCode": { "type": "string" },
                  "state": { "type": "string" },
                  "country": { "type": "string" },
                  "inputUsed": { "type": "string", "description": "e.g., 'phoneNumber and email' or 'email'." }
                }
              },
              "contactPlus": {
                "type": "object",
                "description": "Enhanced contact information module.",
                "properties": { "billingPostalCode": { "type": "string", "example": "95110" } }
              },
              "numberDeactivation": {
                "type": "object",
                "description": "Indicates if/when the number was deactivated.",
                "properties": {
                  "carrierName": { "type": "string", "example": "Verizon" },
                  "lastDeactivated": { "type": "string", "format": "date-time", "example": "2016-04-05T00:00:00Z" },
                  "trackingSince": { "type": "string", "format": "date-time", "example": "2014-10-06T00:00:00Z" },
                  "status": {
                    "type": "object",
                    "properties": {
                      "code": { "type": "integer", "example": 2800 },
                      "description": { "type": "string", "example": "Request successfully completed" }
                    }
                  },
                  "recycledSinceLastVerification": { "type": "string", "example": "notRecycled" }
                }
              },
              "subscriberStatus": { "type": "object", "description": "Provides subscriber account details like type, tenure, and activation." },
              "portingHistory": {
                "type": "object",
                "description": "Shows porting history of the number across carriers.",
                "properties": { "pastXDays": { "type": "integer", "example": 10 } }
              },
              "portingStatus": { "type": "object", "description": "Displays current carrier and whether the number was recently ported." },
              "simSwap": { "type": "object", "description": "Detects recent SIM changes and evaluates risk." }
            }
          },
          "consent": {
            "type": "object",
            "description": "Consent record for querying the number — required for certain add-ons.",
            "properties": {
              "method": {
                "type": "integer",
                "description": "Numeric code for how consent was collected.",
                "enum": [1, 2, 3, 4],
                "example": 1
              },
              "timestamp": {
                "type": "string",
                "format": "date-time",
                "description": "ISO 8601 timestamp of when consent was collected.",
                "example": "2018-05-05T00:00:00Z"
              }
            }
          }
        }
      },
      "PhoneIDResponse": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": { "type": "boolean", "description": "Indicates if the API request itself was successful." },
          "data": {
            "type": "object",
            "properties": {
              "referenceId": { "type": "string", "description": "Unique 32-character hex ID for the transaction." },
              "externalId": { "type": "string", "nullable": true, "description": "Echoed custom ID if provided." },
              "status": {
                "type": "object",
                "properties": {
                  "code": { "type": "integer", "description": "Processing status code (e.g., 300 for success)." },
                  "description": { "type": "string", "description": "Human-readable description of the transaction status." },
                  "updatedOn": { "type": "string", "description": "ISO 8601/RFC 3339 timestamp of last update." }
                }
              },
              "phoneType": {
                "type": "object",
                "properties": {
                  "code": { "type": "string" },
                  "description": { "type": "string" }
                }
              },
              "blocklisting": {
                "type": "object",
                "properties": {
                  "blocked": { "type": "boolean" },
                  "blockCode": { "type": "integer" },
                  "blockDescription": { "type": "string" }
                }
              },
              "carrier": { "type": "object", "properties": { "name": { "type": "string" } } },
              "numbering": {
                "type": "object",
                "properties": {
                  "original": {
                    "type": "object",
                    "properties": {
                      "completePhoneNumber": { "type": "string" },
                      "countryCode": { "type": "string" },
                      "phoneNumber": { "type": "string" }
                    }
                  },
                  "cleansing": {
                    "type": "object",
                    "properties": {
                      "call": {
                        "type": "object",
                        "properties": {
                          "countryCode": { "type": "string" },
                          "phoneNumber": { "type": "string" },
                          "cleansedCode": { "type": "integer" },
                          "minLength": { "type": "integer" },
                          "maxLength": { "type": "integer" }
                        }
                      },
                      "sms": {
                        "type": "object",
                        "properties": {
                          "countryCode": { "type": "string" },
                          "phoneNumber": { "type": "string" },
                          "cleansedCode": { "type": "integer" },
                          "minLength": { "type": "integer" },
                          "maxLength": { "type": "integer" }
                        }
                      }
                    }
                  }
                }
              },
              "location": {
                "type": "object",
                "properties": {
                  "city": { "type": "string", "nullable": true },
                  "state": { "type": "string", "nullable": true },
                  "zip": { "type": "string", "nullable": true },
                  "metroCode": { "type": "string", "nullable": true },
                  "county": { "type": "string", "nullable": true },
                  "country": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "nullable": true },
                      "iso2": { "type": "string", "nullable": true },
                      "iso3": { "type": "string", "nullable": true }
                    }
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "latitude": { "type": "number", "nullable": true },
                      "longitude": { "type": "number", "nullable": true }
                    }
                  },
                  "timeZone": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "nullable": true },
                      "utcOffsetMax": { "type": "string", "nullable": true },
                      "utcOffsetMin": { "type": "string", "nullable": true }
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PhoneRiskScoreRequest": {
        "type": "object",
        "required": ["phoneNumber", "accountLifecycleEvent"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "The phone number to check, including country code (E.164).",
            "example": "+436501234567"
          },
          "accountLifecycleEvent": {
            "type": "string",
            "description": "The action being evaluated.",
            "enum": ["create", "sign-in", "transact", "update", "delete"],
            "example": "create"
          },
          "externalId": {
            "type": "string",
            "description": "Customer-generated ID echoed in the response.",
            "example": "1234567890"
          },
          "originatingIp": {
            "type": "string",
            "description": "End user's IP address (IPv4 or IPv6). Do not send your server IP.",
            "example": "192.168.1.1"
          },
          "deviceId": {
            "type": "string",
            "description": "Case-sensitive device ID.",
            "example": "1234567890"
          },
          "accountId": {
            "type": "string",
            "description": "Case-sensitive account ID.",
            "example": "1234567890"
          },
          "emailAddress": {
            "type": "string",
            "description": "Case-sensitive email address.",
            "example": "test@example.com"
          }
        }
      },
      "PhoneRiskScoreResponse": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Indicates if the API request was successful."
          },
          "data": {
            "type": "object",
            "properties": {
              "referenceId": { "type": "string", "description": "Unique reference ID for the transaction." },
              "externalId": { "type": "string", "nullable": true, "description": "External reference ID (nullable)." },
              "status": {
                "type": "object",
                "properties": {
                  "updatedOn": { "type": "string", "description": "Timestamp of the last update (ISO 8601 format)." },
                  "code": { "type": "number", "description": "Status code (e.g., 300 for success)." },
                  "description": { "type": "string", "description": "Status description message." }
                }
              },
              "numbering": {
                "type": "object",
                "properties": {
                  "original": {
                    "type": "object",
                    "properties": {
                      "completePhoneNumber": { "type": "string" },
                      "countryCode": { "type": "string" },
                      "phoneNumber": { "type": "string" }
                    }
                  },
                  "cleansing": {
                    "type": "object",
                    "properties": {
                      "call": {
                        "type": "object",
                        "properties": {
                          "countryCode": { "type": "string" },
                          "phoneNumber": { "type": "string" },
                          "cleansedCode": { "type": "number" },
                          "minLength": { "type": "number" },
                          "maxLength": { "type": "number" }
                        }
                      },
                      "sms": {
                        "type": "object",
                        "properties": {
                          "countryCode": { "type": "string" },
                          "phoneNumber": { "type": "string" },
                          "cleansedCode": { "type": "number" },
                          "minLength": { "type": "number" },
                          "maxLength": { "type": "number" }
                        }
                      }
                    }
                  }
                }
              },
              "riskInsights": {
                "type": "object",
                "description": "Risk assessment details.",
                "properties": {
                  "status": { "type": "number" },
                  "category": { "type": "array", "items": { "type": "number" } },
                  "a2P": { "type": "array", "items": { "type": "number" } },
                  "p2P": { "type": "array", "items": { "type": "number" } },
                  "numberType": { "type": "array", "items": { "type": "number" } },
                  "ip": { "type": "array", "items": { "type": "number" } },
                  "email": { "type": "array", "items": { "type": "number" } }
                }
              },
              "phoneType": {
                "type": "object",
                "properties": {
                  "code": { "type": "string" },
                  "description": { "type": "string" }
                }
              },
              "location": {
                "type": "object",
                "properties": {
                  "city": { "type": "string", "nullable": true },
                  "state": { "type": "string", "nullable": true },
                  "zip": { "type": "string", "nullable": true },
                  "metroCode": { "type": "string", "nullable": true },
                  "county": { "type": "string", "nullable": true },
                  "country": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "iso2": { "type": "string" },
                      "iso3": { "type": "string" }
                    }
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "latitude": { "type": "number", "nullable": true },
                      "longitude": { "type": "number", "nullable": true }
                    }
                  },
                  "timeZone": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "nullable": true },
                      "utcOffsetMin": { "type": "string" },
                      "utcOffsetMax": { "type": "string" }
                    }
                  }
                }
              },
              "carrier": { "type": "object", "properties": { "name": { "type": "string" } } },
              "blocklisting": {
                "type": "object",
                "properties": {
                  "blocked": { "type": "boolean" },
                  "blockCode": { "type": "number" },
                  "blockDescription": { "type": "string" }
                }
              },
              "risk": {
                "type": "object",
                "description": "Overall risk score and recommendation.",
                "properties": {
                  "level": { "type": "string", "example": "medium-low" },
                  "recommendation": { "type": "string", "example": "allow" },
                  "score": { "type": "number", "example": 301 }
                }
              }
            }
          }
        }
      },
      "VerificationRequest": {
        "type": "object",
        "required": ["method"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Recipient's phone number in international format, no spaces or special characters. Required if method = sms.",
            "example": "14155550123"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Recipient's email address. Required if method = email.",
            "example": "user@example.com"
          },
          "method": {
            "type": "string",
            "description": "Delivery method to use.",
            "enum": ["sms", "email"],
            "example": "sms"
          },
          "securityFactor": {
            "type": "string",
            "description": "Custom numeric OTP (3–10 digits). If omitted, a 6-digit OTP is auto-generated.",
            "pattern": "^[0-9]{3,10}$",
            "example": "123456"
          },
          "externalId": {
            "type": "string",
            "description": "Customer-defined transaction ID. Max length: 100 characters.",
            "maxLength": 100,
            "example": "verifyRequest123"
          },
          "messageTemplate": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Template name (lowercase letters and underscores only).",
                "pattern": "^[a-z_]+$",
                "example": "welcome_otp"
              },
              "verificationTemplate": {
                "type": "string",
                "description": "Template content used for this verification. Use {{code}} placeholder.",
                "example": "Your code is {{code}}. It expires in 5 minutes."
              }
            }
          },
          "voiceLang": {
            "type": "string",
            "description": "Language code for OTP delivery (e.g., 'en-US'). Defaults to English if not provided.",
            "example": "en-US"
          }
        }
      },
      "VerificationResponse": {
        "type": "object",
        "required": ["referenceId", "status", "method", "state"],
        "properties": {
          "referenceId": {
            "type": "string",
            "description": "Unique 32-character hex string that identifies the verification process.",
            "example": "0123456789ABCDEF0123456789ABCDEF"
          },
          "status": {
            "type": "object",
            "required": ["code", "description"],
            "properties": {
              "code": {
                "type": "integer",
                "description": "Numeric code representing the transaction status.",
                "example": 3901
              },
              "description": {
                "type": "string",
                "description": "Human-readable description of the transaction status.",
                "example": "Request in progress"
              }
            }
          },
          "recipient": {
            "type": "object",
            "properties": {
              "phoneNumber": { "type": "string", "description": "Recipient's phone number in international format.", "example": "11234567890" },
              "email": { "type": "string", "format": "email", "description": "Recipient's email address.", "example": "user@example.com" }
            }
          },
          "state": {
            "type": "string",
            "description": "Current state of the verification process.",
            "enum": ["CREATED", "ONGOING", "REJECTED", "FAILED", "VERIFIED", "CANCELED"],
            "example": "CREATED"
          },
          "method": {
            "type": "string",
            "enum": ["sms", "email"],
            "description": "The verification method used.",
            "example": "sms"
          }
        }
      },
      "VerificationMatchRequest": {
        "type": "object",
        "required": ["action", "securityFactor"],
        "properties": {
          "action": {
            "type": "string",
            "description": "Specifies how to change the verification state.",
            "enum": ["finalize"],
            "example": "finalize"
          },
          "securityFactor": {
            "type": "string",
            "description": "OTP provided by the end user (3–10 digits).",
            "pattern": "^[0-9]{3,10}$",
            "example": "123456"
          }
        }
      },
      "VerificationMatchResponse": {
        "type": "object",
        "required": ["status"],
        "properties": {
          "status": {
            "type": "object",
            "required": ["code", "description"],
            "properties": {
              "code": {
                "type": "integer",
                "description": "Numeric code indicating the result of the verification match.",
                "example": 3900
              },
              "description": {
                "type": "string",
                "description": "Human-readable outcome of the verification match.",
                "example": "Verified"
              }
            }
          }
        }
      },
      "FullPhoneIntelligenceRequest": {
        "type": "object",
        "required": ["phoneNumber"],
        "properties": {
          "phoneNumber": {
            "type": "string",
            "description": "Phone number to check, including country code (E.164).",
            "example": "+436501234567"
          }
        }
      },
      "FullPhoneIntelligenceResponse": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": { "type": "boolean", "description": "Indicates if the API request was successful." },
          "data": {
            "type": "object",
            "properties": {
              "referenceId": { "type": "string", "description": "Unique reference ID for the transaction." },
              "externalId": { "type": "string", "nullable": true, "description": "External reference ID (nullable)." },
              "status": {
                "type": "object",
                "properties": {
                  "updatedOn": { "type": "string", "description": "Timestamp of the last update (ISO 8601 format)." },
                  "code": { "type": "number", "description": "Status code (e.g., 300 for success)." },
                  "description": { "type": "string", "description": "Status description message." }
                }
              },
              "numbering": {
                "type": "object",
                "properties": {
                  "original": {
                    "type": "object",
                    "properties": {
                      "completePhoneNumber": { "type": "string" },
                      "countryCode": { "type": "string" },
                      "phoneNumber": { "type": "string" }
                    }
                  },
                  "cleansing": {
                    "type": "object",
                    "properties": {
                      "call": {
                        "type": "object",
                        "properties": {
                          "countryCode": { "type": "string" },
                          "phoneNumber": { "type": "string" },
                          "cleansedCode": { "type": "number" },
                          "minLength": { "type": "number" },
                          "maxLength": { "type": "number" }
                        }
                      },
                      "sms": {
                        "type": "object",
                        "properties": {
                          "countryCode": { "type": "string" },
                          "phoneNumber": { "type": "string" },
                          "cleansedCode": { "type": "number" },
                          "minLength": { "type": "number" },
                          "maxLength": { "type": "number" }
                        }
                      }
                    }
                  }
                }
              },
              "riskInsights": {
                "type": "object",
                "description": "Risk assessment details.",
                "properties": {
                  "status": { "type": "number" },
                  "category": { "type": "array", "items": { "type": "number" } },
                  "a2P": { "type": "array", "items": { "type": "number" } },
                  "p2P": { "type": "array", "items": { "type": "number" } },
                  "numberType": { "type": "array", "items": { "type": "number" } },
                  "ip": { "type": "array", "items": { "type": "number" } },
                  "email": { "type": "array", "items": { "type": "number" } }
                }
              },
              "phoneType": {
                "type": "object",
                "properties": {
                  "code": { "type": "string" },
                  "description": { "type": "string" }
                }
              },
              "location": {
                "type": "object",
                "properties": {
                  "city": { "type": "string", "nullable": true },
                  "state": { "type": "string", "nullable": true },
                  "zip": { "type": "string", "nullable": true },
                  "metroCode": { "type": "string", "nullable": true },
                  "county": { "type": "string", "nullable": true },
                  "country": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string" },
                      "iso2": { "type": "string" },
                      "iso3": { "type": "string" }
                    }
                  },
                  "coordinates": {
                    "type": "object",
                    "properties": {
                      "latitude": { "type": "number", "nullable": true },
                      "longitude": { "type": "number", "nullable": true }
                    }
                  },
                  "timeZone": {
                    "type": "object",
                    "properties": {
                      "name": { "type": "string", "nullable": true },
                      "utcOffsetMin": { "type": "string" },
                      "utcOffsetMax": { "type": "string" }
                    }
                  }
                }
              },
              "carrier": { "type": "object", "properties": { "name": { "type": "string" } } },
              "blocklisting": {
                "type": "object",
                "properties": {
                  "blocked": { "type": "boolean" },
                  "blockCode": { "type": "number" },
                  "blockDescription": { "type": "string" }
                }
              },
              "risk": {
                "type": "object",
                "description": "Overall risk score and recommendation.",
                "properties": {
                  "level": { "type": "string", "example": "medium-low" },
                  "recommendation": { "type": "string", "example": "allow" },
                  "score": { "type": "number", "example": 301 }
                }
              }
            }
          }
        }
      },

      "CreateSessionLinkRequest": {
        "type": "object",
        "required": ["email", "phoneNumber", "redirectUrl", "docUrl"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email address.",
            "format": "email",
            "example": "user@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User's phone number (E.164 format).",
            "example": "+436769556026",
            "pattern": "^\\+?[1-9]\\d{1,14}$"
          },
          "redirectUrl": {
            "type": "string",
            "description": "URL to redirect user to after signing.",
            "format": "uri",
            "example": "https://example.com/onboarding/success"
          },
          "docUrl": {
            "type": "string",
            "description": "Public HTTPS URL of the PDF to sign. Must be accessible without auth headers.",
            "format": "uri",
            "example": "https://cdn.idcanopy.com/pdf/onb-t3.pdf",
            "pattern": "^https://"
          },
          "signForms": {
            "type": "array",
            "description": "Signature fields in the PDF (AcroForm field IDs).",
            "items": {
              "type": "object",
              "required": ["fieldId", "actorId"],
              "properties": {
                "fieldId": {
                  "type": "string",
                  "description": "AcroForm signature field ID."
                },
                "actorId": {
                  "type": "string",
                  "description": "Identifier of the signer (e.g., 'userToIdentify')."
                }
              }
            }
          },
          "fillForm": {
            "type": "array",
            "description": "Pre-fillable text fields in the PDF.",
            "items": {
              "type": "object",
              "required": ["fieldId", "value"],
              "properties": {
                "fieldId": {
                  "type": "string",
                  "description": "AcroForm text field ID."
                },
                "value": {
                  "type": "string",
                  "description": "Value to insert (supports template vars like ${identification.firstName})."
                }
              }
            }
          }
        }
      },
      "CreateSessionLinkResponse": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Whether the request was successful."
          },
          "data": {
            "type": "object",
            "required": ["url", "expiresAfter", "requestId"],
            "properties": {
              "requestId": {
                "type": "string",
                "description": "Unique identifier for the created session.",
                "example": "123e4567-e89b-12d3-a456-426614174000"
              },
              "url": {
                "type": "string",
                "description": "URL to redirect user to the signing wizard.",
                "format": "uri",
                "example": "https://example.com/api/v2/actorTrip/urlback?t=EXAMPLE_TOKEN"
              },
              "expiresAfter": {
                "type": "string",
                "format": "date-time",
                "description": "ISO timestamp for session expiration.",
                "example": "2025-07-30T08:55:52.520909994Z"
              }
            }
          }
        }
      },
      "ConfigureWebhookRequest": {
        "type": "object",
        "required": ["webhookUrl"],
        "properties": {
          "webhookUrl": {
            "type": "string",
            "format": "uri",
            "description": "URL to receive status pings.",
            "example": "https://api.idcanopy.com/webhooks/onboarding"
          }
        }
      },
      "ConfigureWebhookResponse": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Indicates if webhook was saved."
          },
          "data": {
            "type": "object",
            "required": ["id", "url", "createdAt"],
            "properties": {
              "id": {
                "type": "string",
                "description": "Internal webhook ID.",
                "example": "74884fe3-c9e1-4462-b60f-c461e422000c"
              },
              "url": {
                "type": "string",
                "format": "uri",
                "description": "Registered webhook URL.",
                "example": "https://api.idcanopy.com/webhooks/onboarding"
              },
              "createdAt": {
                "type": "string",
                "format": "date-time",
                "description": "Timestamp of creation.",
                "example": "2025-05-08T16:39:28.339Z"
              }
            }
          }
        }
      },
      "WebhookEventPayload": {
        "type": "object",
        "description": "Payload your webhook endpoint will receive for status updates.",
        "required": ["requestId", "type", "status"],
        "properties": {
          "requestId": {
            "type": "string",
            "description": "ID of the related onboarding session.",
            "example": "xxxxxxxxx"
          },
          "type": {
            "type": "string",
            "description": "Event type.",
            "enum": ["STATUS_UPDATE"],
            "example": "STATUS_UPDATE"
          },
          "status": {
            "type": "string",
            "description": "Outcome of the onboarding session.",
            "enum": ["COMPLETED", "FAILED", "CANCELLED"],
            "example": "COMPLETED"
          }
        }
      },
      "VerificationResultResponse": {
        "type": "object",
        "required": ["status", "data"],
        "properties": {
          "status": {
            "type": "boolean",
            "description": "Indicates whether the request succeeded."
          },
          "data": {
            "type": "object",
            "description": "Verification payload.",
            "properties": {
              "isVerified": { "type": "boolean", "description": "Whether the verification was successful." },
              "status": {
                "type": "string",
                "description": "High-level status of the verification.",
                "enum": ["completed", "cancelled", "error"]
              },
              "message": { "type": "string", "description": "Status message." },
              "requestId": { "type": "string", "description": "Unique ID for the verification request." },

              "signature": {
                "type": "object",
                "description": "Signature metadata and resources.",
                "properties": {
                  "content": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": { "type": "string" },
                        "method": { "type": "string" },
                        "status": { "type": "string" },
                        "pageMode": { "type": "string" },
                        "signedAt": { "type": "string", "format": "date-time" },
                        "plainResource": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "name": { "type": "string" },
                            "type": { "type": "string" },
                            "family": { "type": "string" },
                            "status": { "type": "string" },
                            "subType": { "type": "string" },
                            "filename": { "type": "string" },
                            "metadata": { "type": "object", "additionalProperties": true },
                            "mimeType": { "type": "string" },
                            "sizeBytes": { "type": "integer" },
                            "resourceUri": { "type": "string" },
                            "resourceUrl": { "type": "string", "format": "uri" },
                            "urlValidBefore": { "type": "string", "format": "date-time" }
                          },
                          "additionalProperties": true
                        },
                        "signedResource": {
                          "type": "object",
                          "properties": {
                            "id": { "type": "string" },
                            "type": { "type": "string" },
                            "family": { "type": "string" },
                            "status": { "type": "string" },
                            "filename": { "type": "string" },
                            "metadata": { "type": "object", "additionalProperties": true },
                            "mimeType": { "type": "string" },
                            "sizeBytes": { "type": "integer" },
                            "resourceUri": { "type": "string" },
                            "resourceUrl": { "type": "string", "format": "uri" },
                            "urlValidBefore": { "type": "string", "format": "date-time" }
                          },
                          "additionalProperties": true
                        }
                      },
                      "additionalProperties": true
                    }
                  }
                }
              },

              "identification": {
                "type": "object",
                "description": "KYC / identification results.",
                "properties": {
                  "id": { "type": "string" },
                  "actor": { "type": "string", "description": "Role of the actor in session (e.g., userToIdentify)." },
                  "idSelf": {
                    "type": "object",
                    "properties": {
                      "artifacts": {
                        "type": "object",
                        "properties": {
                          "biometry": { "type": "array", "items": { "type": "object" } },
                          "document": { "type": "array", "items": { "type": "object" } }
                        }
                      },
                      "biometryCheck": {
                        "type": "object",
                        "properties": {
                          "keysWithError": { "type": "array", "items": { "type": "string" } },
                          "controlsSummary": { "type": "integer" }
                        }
                      },
                      "documentCheck": {
                        "type": "object",
                        "properties": {
                          "documentType": { "type": "string" },
                          "documentTypeFamily": { "type": "string" },
                          "keysWithError": { "type": "array", "items": { "type": "string" } },
                          "controlsSummary": { "type": "integer" }
                        }
                      }
                    },
                    "additionalProperties": true
                  },
                  "source": { "type": "string" },
                  "status": { "type": "string" },
                  "personData": {
                    "type": "object",
                    "properties": {
                      "email": { "type": "string", "format": "email" },
                      "gender": { "type": "string" },
                      "firstName": { "type": "string" },
                      "lastName": { "type": "string" },
                      "birthDate": { "type": "string", "pattern": "^\\d{4}-\\d{2}-\\d{2}$" },
                      "birthPlace": { "type": "string" },
                      "nationality": { "type": "string" },
                      "phoneNumber": { "type": "string" },
                      "documentDetails": {
                        "type": "object",
                        "properties": {
                          "type": { "type": "string" },
                          "number": { "type": "string" },
                          "issuedOn": { "type": "string" },
                          "expiryDate": { "type": "string" },
                          "issuanceCountry": { "type": "string" },
                          "issuanceAuthority": { "type": "string" }
                        }
                      }
                    },
                    "additionalProperties": true
                  },
                  "finalizedAt": { "type": "string", "format": "date-time" },
                  "organizationId": { "type": "string" },
                  "validationDetail": {
                    "type": "object",
                    "description": "Per-field validation indicators.",
                    "additionalProperties": {
                      "type": "object",
                      "properties": {
                        "otpValidated": { "type": "string" },
                        "byRequestInput": { "type": "string" },
                        "requestMatched": { "type": "string" },
                        "byIdentificationSource": { "type": "string" }
                      },
                      "additionalProperties": true
                    }
                  }
                },
                "additionalProperties": true
              }
            },
            "additionalProperties": true
          }
        }
      },

      "CleansingDetails": {
        "type": "object",
        "properties": {
          "countryCode": { "type": "string" },
          "phoneNumber": { "type": "string" },
          "cleansedCode": { "type": "integer" },
          "minLength": { "type": "integer" },
          "maxLength": { "type": "integer" }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
} 